/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package srw.mxp.unit.editor;

import java.awt.Color;

/**
 *
 * @author Jonatan
 */
public class WeaponPanel extends javax.swing.JPanel {
    Color deactivated = new Color(150, 150, 150);

    /**
     * Creates new form WeaponPanel
     */
    public WeaponPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelWeapID = new javax.swing.JLabel();
        labelID = new javax.swing.JLabel();
        labelWeapPower = new javax.swing.JLabel();
        textfieldPower = new javax.swing.JTextField();
        textfieldMinRange = new javax.swing.JTextField();
        labelWeapRange = new javax.swing.JLabel();
        textfieldMaxRange = new javax.swing.JTextField();
        labelTo = new javax.swing.JLabel();
        checkP = new javax.swing.JCheckBox();
        checkW = new javax.swing.JCheckBox();
        checkMissile = new javax.swing.JCheckBox();
        checkBuilding = new javax.swing.JCheckBox();
        labelWeapHit = new javax.swing.JLabel();
        textfieldHit = new javax.swing.JTextField();
        labelWeapCrit = new javax.swing.JLabel();
        textfieldCrit = new javax.swing.JTextField();
        textfieldAmmo = new javax.swing.JTextField();
        labelWeapAmmo = new javax.swing.JLabel();
        textfieldEN = new javax.swing.JTextField();
        labelWeapEN = new javax.swing.JLabel();
        labelWeapWill = new javax.swing.JLabel();
        textfieldWill = new javax.swing.JTextField();
        labelWeapNT = new javax.swing.JLabel();
        comboNT = new javax.swing.JComboBox();
        labelMapAssist = new javax.swing.JLabel();
        comboMapAssist = new javax.swing.JComboBox();
        labelType = new javax.swing.JLabel();
        comboType = new javax.swing.JComboBox();
        labelExpansion = new javax.swing.JLabel();
        comboExpansion = new javax.swing.JComboBox();
        labelField = new javax.swing.JLabel();
        comboField = new javax.swing.JComboBox();
        labelSky = new javax.swing.JLabel();
        comboSky = new javax.swing.JComboBox();
        jSeparator1 = new javax.swing.JSeparator();
        labelGround = new javax.swing.JLabel();
        comboGround = new javax.swing.JComboBox();
        labelSpace = new javax.swing.JLabel();
        comboSpace = new javax.swing.JComboBox();
        labelWater = new javax.swing.JLabel();
        comboWater = new javax.swing.JComboBox();
        labelStatus = new javax.swing.JLabel();
        comboStatus = new javax.swing.JComboBox();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());

        labelWeapID.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelWeapID.setForeground(new java.awt.Color(255, 0, 0));
        labelWeapID.setText("Weapon ID:");

        labelWeapPower.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelWeapPower.setText("Base power:");
        labelWeapPower.setEnabled(false);

        textfieldPower.setEnabled(false);
        textfieldPower.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textfieldPowerKeyTyped(evt);
            }
        });

        textfieldMinRange.setEnabled(false);
        textfieldMinRange.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textfieldMinRangeKeyTyped(evt);
            }
        });

        labelWeapRange.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelWeapRange.setText("Weapon range:");
        labelWeapRange.setEnabled(false);

        textfieldMaxRange.setEnabled(false);
        textfieldMaxRange.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textfieldMaxRangeKeyTyped(evt);
            }
        });

        labelTo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelTo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelTo.setText("~");
        labelTo.setEnabled(false);

        checkP.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        checkP.setText("P");
        checkP.setEnabled(false);

        checkW.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        checkW.setText("W");
        checkW.setEnabled(false);

        checkMissile.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        checkMissile.setText("Msl");
        checkMissile.setEnabled(false);

        checkBuilding.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        checkBuilding.setText("Bld");
        checkBuilding.setEnabled(false);

        labelWeapHit.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelWeapHit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelWeapHit.setText("Hit bonus:");
        labelWeapHit.setEnabled(false);

        textfieldHit.setEnabled(false);
        textfieldHit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textfieldHitKeyTyped(evt);
            }
        });

        labelWeapCrit.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelWeapCrit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelWeapCrit.setText("Crit bonus:");
        labelWeapCrit.setEnabled(false);

        textfieldCrit.setEnabled(false);
        textfieldCrit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textfieldCritKeyTyped(evt);
            }
        });

        textfieldAmmo.setEnabled(false);
        textfieldAmmo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textfieldAmmoKeyTyped(evt);
            }
        });

        labelWeapAmmo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelWeapAmmo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelWeapAmmo.setText("Ammo:");
        labelWeapAmmo.setEnabled(false);

        textfieldEN.setEnabled(false);
        textfieldEN.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textfieldENKeyTyped(evt);
            }
        });

        labelWeapEN.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelWeapEN.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelWeapEN.setText("EN cost:");
        labelWeapEN.setEnabled(false);

        labelWeapWill.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelWeapWill.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelWeapWill.setText("Will req:");
        labelWeapWill.setEnabled(false);

        textfieldWill.setEnabled(false);
        textfieldWill.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textfieldWillKeyTyped(evt);
            }
        });

        labelWeapNT.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelWeapNT.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelWeapNT.setText("NT level:");
        labelWeapNT.setEnabled(false);

        comboNT.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "NT1", "NT4", "NT5" }));
        comboNT.setEnabled(false);

        labelMapAssist.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelMapAssist.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelMapAssist.setText("Map / Assist");
        labelMapAssist.setEnabled(false);

        comboMapAssist.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No", "Assist", "Map (0)", "Map (1)", "Map (2)", "Map (3)", "Map (4)", "Map (5)", "Map (6)", "Map (7)", "Map (8)", "Map (9)", "Map (10)", "Map (11)", "Map (12)", "Map (13)", "Map (14)", "Map (15)", "Map (16)", "Map (17)", "Map (18)", "Map (19)", "Map (20)", "Map (40)", "Map (43)" }));
        comboMapAssist.setEnabled(false);

        labelType.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelType.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelType.setText("Type");
        labelType.setEnabled(false);

        comboType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Normal", "Blockable", "Beam", "Gravity", "Funnel (block)", "Funnel (no block)" }));
        comboType.setEnabled(false);

        labelExpansion.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelExpansion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelExpansion.setText("Expansion");
        labelExpansion.setEnabled(false);

        comboExpansion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No", "Null bunshin", "Reduce shield" }));
        comboExpansion.setEnabled(false);

        labelField.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelField.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelField.setText("Field");
        labelField.setEnabled(false);

        comboField.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No", "Null D. Field", "Null AT Field" }));
        comboField.setEnabled(false);

        labelSky.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelSky.setForeground(new java.awt.Color(51, 204, 0));
        labelSky.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelSky.setText("Sky:");
        labelSky.setEnabled(false);

        comboSky.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "C", "B", "A", "S" }));
        comboSky.setEnabled(false);

        labelGround.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelGround.setForeground(new java.awt.Color(204, 153, 0));
        labelGround.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelGround.setText("Ground:");
        labelGround.setEnabled(false);

        comboGround.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "C", "B", "A", "S" }));
        comboGround.setEnabled(false);

        labelSpace.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelSpace.setForeground(new java.awt.Color(204, 0, 204));
        labelSpace.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelSpace.setText("Space:");
        labelSpace.setEnabled(false);

        comboSpace.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "B", "A", "S" }));
        comboSpace.setEnabled(false);

        labelWater.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelWater.setForeground(new java.awt.Color(0, 153, 204));
        labelWater.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelWater.setText("Water:");
        labelWater.setEnabled(false);

        comboWater.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "C", "B", "A", "S" }));
        comboWater.setEnabled(false);

        labelStatus.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelStatus.setText("Status Effect:");
        labelStatus.setEnabled(false);

        comboStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "06 - Enemy weapons ACC -10", "13 - Enemy unit can't move", "19 - Poison: HP -5% at the end of the turn", "20 - Unit mobility -10 + Poison", "21 - Unit mobility -10, movement -2", "22 - Enemy unit can't move", "23 - Unit mobility -10, movement -2", "25 - Unit mobility -10, movement -2" }));
        comboStatus.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelWeapID, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelID, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelMapAssist, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboMapAssist, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(comboType, javax.swing.GroupLayout.Alignment.LEADING, 0, 91, Short.MAX_VALUE)
                            .addComponent(labelType, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comboExpansion, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelExpansion, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(comboField, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelField, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelWeapPower, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(labelWeapRange))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(textfieldPower, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(textfieldMinRange, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(5, 5, 5)
                                .addComponent(labelTo, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textfieldMaxRange, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(6, 6, 6)
                        .addComponent(checkP)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(checkW)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(checkMissile)
                        .addGap(7, 7, 7)
                        .addComponent(checkBuilding))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(textfieldHit, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(labelWeapHit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(textfieldCrit, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(labelWeapCrit, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(labelWeapAmmo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(textfieldAmmo, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(labelWeapEN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(textfieldEN, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(10, 10, 10)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(labelWeapWill, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(textfieldWill, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(labelWeapNT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(comboNT, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelSky, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboSky, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelGround, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboGround, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelSpace, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboSpace, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelWater, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboWater, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelWeapID)
                    .addComponent(labelID, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelWeapPower)
                            .addComponent(labelWeapRange))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(textfieldPower, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textfieldMinRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textfieldMaxRange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelTo)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(checkP)
                        .addComponent(checkW)
                        .addComponent(checkMissile)
                        .addComponent(checkBuilding)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelMapAssist)
                            .addComponent(labelType))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboMapAssist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(labelField)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(comboField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(labelExpansion)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(comboExpansion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelWeapHit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textfieldHit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelWeapCrit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textfieldCrit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelWeapAmmo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textfieldAmmo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(labelWeapWill)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(textfieldWill, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelWeapNT)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(comboNT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelWeapEN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textfieldEN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelSky)
                    .addComponent(comboSky, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelGround)
                    .addComponent(comboGround, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelSpace)
                    .addComponent(comboSpace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelWater)
                    .addComponent(comboWater, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelStatus)
                    .addComponent(comboStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void textfieldPowerKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textfieldPowerKeyTyped
        // TODO add your handling code here:
        if (evt.getKeyChar() < '0' || evt.getKeyChar() > '9')
            evt.consume();
    }//GEN-LAST:event_textfieldPowerKeyTyped

    private void textfieldMinRangeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textfieldMinRangeKeyTyped
        // TODO add your handling code here:
        if (evt.getKeyChar() < '0' || evt.getKeyChar() > '9')
            evt.consume();
    }//GEN-LAST:event_textfieldMinRangeKeyTyped

    private void textfieldMaxRangeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textfieldMaxRangeKeyTyped
        // TODO add your handling code here:
        if (evt.getKeyChar() < '0' || evt.getKeyChar() > '9')
            evt.consume();
    }//GEN-LAST:event_textfieldMaxRangeKeyTyped

    private void textfieldHitKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textfieldHitKeyTyped
        // TODO add your handling code here:
        if (evt.getKeyChar() < '0' || evt.getKeyChar() > '9')
            evt.consume();
    }//GEN-LAST:event_textfieldHitKeyTyped

    private void textfieldCritKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textfieldCritKeyTyped
        // TODO add your handling code here:
        if (evt.getKeyChar() < '0' || evt.getKeyChar() > '9')
            evt.consume();
    }//GEN-LAST:event_textfieldCritKeyTyped

    private void textfieldAmmoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textfieldAmmoKeyTyped
        // TODO add your handling code here:
        if (evt.getKeyChar() < '0' || evt.getKeyChar() > '9')
            evt.consume();
    }//GEN-LAST:event_textfieldAmmoKeyTyped

    private void textfieldENKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textfieldENKeyTyped
        // TODO add your handling code here:
        if (evt.getKeyChar() < '0' || evt.getKeyChar() > '9')
            evt.consume();
    }//GEN-LAST:event_textfieldENKeyTyped

    private void textfieldWillKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textfieldWillKeyTyped
        // TODO add your handling code here:
        if (evt.getKeyChar() < '0' || evt.getKeyChar() > '9')
            evt.consume();
    }//GEN-LAST:event_textfieldWillKeyTyped

    
    public void setID(int id){
        labelID.setText("" + id);
        
        if (id > 0)
            activate();
        else{
            this.setBackground(deactivated);
            checkP.setBackground(deactivated);
            checkW.setBackground(deactivated);
            checkMissile.setBackground(deactivated);
            checkBuilding.setBackground(deactivated);
        }
    }
    
    public int getID(){
        return Integer.valueOf( labelID.getText() );
    }
    
    public void activate(){
        labelWeapPower.setEnabled(true);
        labelWeapRange.setEnabled(true);
        labelTo.setEnabled(true);
        labelMapAssist.setEnabled(true);
        labelType.setEnabled(true);
        labelExpansion.setEnabled(true);
        labelField.setEnabled(true);
        labelWeapHit.setEnabled(true);
        labelWeapCrit.setEnabled(true);
        labelWeapAmmo.setEnabled(true);
        labelWeapEN.setEnabled(true);
        labelWeapWill.setEnabled(true);
        labelWeapNT.setEnabled(true);
        
        checkP.setEnabled(true);
        checkW.setEnabled(true);
        checkMissile.setEnabled(true);
        checkBuilding.setEnabled(true);
        comboMapAssist.setEnabled(true);
        comboType.setEnabled(true);
        comboExpansion.setEnabled(true);
        comboField.setEnabled(true);
        
        textfieldPower.setEnabled(true);
        textfieldMinRange.setEnabled(true);
        textfieldMaxRange.setEnabled(true);
        textfieldHit.setEnabled(true);
        textfieldCrit.setEnabled(true);
        textfieldAmmo.setEnabled(true);
        textfieldEN.setEnabled(true);
        textfieldWill.setEnabled(true);
        comboNT.setEnabled(true);
        
        labelSky.setEnabled(true);
        labelGround.setEnabled(true);
        labelSpace.setEnabled(true);
        labelWater.setEnabled(true);
        
        comboSky.setEnabled(true);
        comboGround.setEnabled(true);
        comboSpace.setEnabled(true);
        comboWater.setEnabled(true);
        
        labelStatus.setEnabled(true);
        comboStatus.setEnabled(true);
    }
    
    
    public void setPower(int p){
        textfieldPower.setText("" + p);
    }
    
    public int getPower(){
        return Integer.valueOf( textfieldPower.getText() );
    }
    
    public void setMinRange(int min){
        textfieldMinRange.setText("" + min);
    }
    
    public int getMinRange(){
        return Integer.valueOf( textfieldMinRange.getText() );
    }

    public void setMaxRange(int max){
        textfieldMaxRange.setText("" + max);
    }
    
    public int getMaxRange(){
        return Integer.valueOf( textfieldMaxRange.getText() );
    }
    
    public void setP(boolean active){
        checkP.setSelected(active);
    }
    
    public boolean getP(){
        return checkP.isSelected();
    }

    public void setW(boolean active){
        checkW.setSelected(active);
    }
    
    public boolean getW(){
        return checkW.isSelected();
    }

    public void setMissile(boolean active){
        checkMissile.setSelected(active);
    }
    
    public boolean getMissile(){
        return checkMissile.isSelected();
    }

    public void setBuilding(boolean active){
        checkBuilding.setSelected(active);
    }
    
    public boolean getBuilding(){
        return checkBuilding.isSelected();
    }

    public void setMapAssist(int ma){
        comboMapAssist.setSelectedIndex(ma);
    }
    
    public int getMapAssist(){
        return comboMapAssist.getSelectedIndex();
    }
    
    public void setType(int t){
        comboType.setSelectedIndex(t);
    }
    
    public int getType(){
        return comboType.getSelectedIndex();
    }
    
    public void setExpansion(int e){
        comboExpansion.setSelectedIndex(e);
    }
    
    public int getExpansion(){
        return comboExpansion.getSelectedIndex();
    }
    
    public void setField(int f){
        comboField.setSelectedIndex(f);
    }
    
    public int getField(){
        return comboField.getSelectedIndex();
    }
    
    public void setHit(int h){
        textfieldHit.setText("" + h);
    }
    
    public int getHit(){
        return Integer.valueOf( textfieldHit.getText() );
    }
    
    public void setCrit(int c){
        textfieldCrit.setText("" + c);
    }
    
    public int getCrit(){
        return Integer.valueOf( textfieldCrit.getText() );
    }
    
    public void setAmmo(int a){
        textfieldAmmo.setText("" + a);
    }
    
    public int getAmmo(){
        return Integer.valueOf( textfieldAmmo.getText() );
    }
    
    public void setEN(int e){
        textfieldEN.setText("" + e);
    }
    
    public int getEN(){
        return Integer.valueOf( textfieldEN.getText() );
    }
    
    public void setWill(int w){
        textfieldWill.setText("" + w);
    }
    
    public int getWill(){
        return Integer.valueOf( textfieldWill.getText() );
    }
    
    public void setNT(int nt){
        if (nt > 3)
            nt = 3;
        
        comboNT.setSelectedIndex(nt);
    }
    
    public int getNT(){
        int nt = comboNT.getSelectedIndex();
        
        if (nt > 2)
            nt = 255;
        
        return nt;
    }
    
    public void setSky(int rating){
        comboSky.setSelectedIndex(rating);
    }
    
    public int getSky(){
        return comboSky.getSelectedIndex();
    }
    
    public void setGround(int rating){
        comboGround.setSelectedIndex(rating);
    }
    
    public int getGround(){
        return comboGround.getSelectedIndex();
    }
    
    public void setSpace(int rating){
        comboSpace.setSelectedIndex(rating);
    }
    
    public int getSpace(){
        return comboSpace.getSelectedIndex();
    }
    
    public void setWater(int rating){
        comboWater.setSelectedIndex(rating);
    }
    
    public int getWater(){
        return comboWater.getSelectedIndex();
    }
    
    public void setStatus(int s){
        switch (s){
            case 6:
                comboStatus.setSelectedIndex(1);
                break;
            case 13:
                comboStatus.setSelectedIndex(2);
                break;
            case 19:
                comboStatus.setSelectedIndex(3);
                break;
            case 20:
                comboStatus.setSelectedIndex(4);
                break;
            case 21:
                comboStatus.setSelectedIndex(5);
                break;
            case 22:
                comboStatus.setSelectedIndex(6);
                break;
            case 23:
                comboStatus.setSelectedIndex(7);
                break;
            case 25:
                comboStatus.setSelectedIndex(8);
                break;
            default:
                comboStatus.setSelectedIndex(0);
                break;
        }
    }
    
    public int getStatus(){
        int status = 0;
        
        switch (comboStatus.getSelectedIndex()){
            case 1:
                status = 6;
                break;
            case 2:
                status = 13;
                break;
            case 3:
                status = 19;
                break;
            case 4:
                status = 20;
                break;
            case 5:
                status = 21;
                break;
            case 6:
                status = 22;
                break;
            case 7:
                status = 23;
                break;
            case 8:
                status = 25;
                break;
        }
        
        return status;
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkBuilding;
    private javax.swing.JCheckBox checkMissile;
    private javax.swing.JCheckBox checkP;
    private javax.swing.JCheckBox checkW;
    private javax.swing.JComboBox comboExpansion;
    private javax.swing.JComboBox comboField;
    private javax.swing.JComboBox comboGround;
    private javax.swing.JComboBox comboMapAssist;
    private javax.swing.JComboBox comboNT;
    private javax.swing.JComboBox comboSky;
    private javax.swing.JComboBox comboSpace;
    private javax.swing.JComboBox comboStatus;
    private javax.swing.JComboBox comboType;
    private javax.swing.JComboBox comboWater;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel labelExpansion;
    private javax.swing.JLabel labelField;
    private javax.swing.JLabel labelGround;
    private javax.swing.JLabel labelID;
    private javax.swing.JLabel labelMapAssist;
    private javax.swing.JLabel labelSky;
    private javax.swing.JLabel labelSpace;
    private javax.swing.JLabel labelStatus;
    private javax.swing.JLabel labelTo;
    private javax.swing.JLabel labelType;
    private javax.swing.JLabel labelWater;
    private javax.swing.JLabel labelWeapAmmo;
    private javax.swing.JLabel labelWeapCrit;
    private javax.swing.JLabel labelWeapEN;
    private javax.swing.JLabel labelWeapHit;
    private javax.swing.JLabel labelWeapID;
    private javax.swing.JLabel labelWeapNT;
    private javax.swing.JLabel labelWeapPower;
    private javax.swing.JLabel labelWeapRange;
    private javax.swing.JLabel labelWeapWill;
    private javax.swing.JTextField textfieldAmmo;
    private javax.swing.JTextField textfieldCrit;
    private javax.swing.JTextField textfieldEN;
    private javax.swing.JTextField textfieldHit;
    private javax.swing.JTextField textfieldMaxRange;
    private javax.swing.JTextField textfieldMinRange;
    private javax.swing.JTextField textfieldPower;
    private javax.swing.JTextField textfieldWill;
    // End of variables declaration//GEN-END:variables
}

/*
 * Copyright (C) 2014 Dashman
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package srw.mxp.unit.editor;

import java.awt.Component;
import java.awt.Dimension;
import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Jonatan
 */
public class UserInterfaceUE extends javax.swing.JFrame {
    UnitData[] units;
    WeaponData[] weapons;

    String lastDirectory = ".";
    String current_file = "";
    boolean file_loaded = false;
    int current_unit = 0;
    
    int unit_offset = 0x0017EF64;
    int weap_offset = 0x0018E770;

    /**
     * Creates new form UserInterfaceUE
     */
    public UserInterfaceUE() {
        initComponents();
        
        this.setIconImage(new ImageIcon(getClass().getClassLoader().getResource("resources/icons/MX logo.png")).getImage());
        
        scrollWeapons.getVerticalScrollBar().setUnitIncrement(16);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelNavigation = new javax.swing.JPanel();
        buttonPrevious = new javax.swing.JButton();
        labelCurrent = new javax.swing.JLabel();
        buttonNext = new javax.swing.JButton();
        labelJumpTo = new javax.swing.JLabel();
        textfieldJump = new javax.swing.JTextField();
        buttonJump = new javax.swing.JButton();
        panelUnit = new javax.swing.JPanel();
        labelUnitName = new javax.swing.JLabel();
        labelName = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        labelUnitHP = new javax.swing.JLabel();
        labelUnitEN = new javax.swing.JLabel();
        labelUnitArmor = new javax.swing.JLabel();
        labelUnitMobility = new javax.swing.JLabel();
        labelUnitMovement = new javax.swing.JLabel();
        textfieldHP = new javax.swing.JTextField();
        textfieldEN = new javax.swing.JTextField();
        textfieldArmor = new javax.swing.JTextField();
        textfieldMobility = new javax.swing.JTextField();
        textfieldMovement = new javax.swing.JTextField();
        labelUnitCost = new javax.swing.JLabel();
        textfieldCost = new javax.swing.JTextField();
        labelUnitRewardCash = new javax.swing.JLabel();
        textfieldReward = new javax.swing.JTextField();
        jSeparator4 = new javax.swing.JSeparator();
        labelAbilities = new javax.swing.JLabel();
        labelAbility1 = new javax.swing.JLabel();
        labelAbility2 = new javax.swing.JLabel();
        labelAbility3 = new javax.swing.JLabel();
        labelAbility4 = new javax.swing.JLabel();
        comboAbility1 = new javax.swing.JComboBox();
        comboAbility2 = new javax.swing.JComboBox();
        comboAbility3 = new javax.swing.JComboBox();
        comboAbility4 = new javax.swing.JComboBox();
        labelSeriesID = new javax.swing.JLabel();
        labelSeries = new javax.swing.JLabel();
        labelUnitParts = new javax.swing.JLabel();
        comboParts = new javax.swing.JComboBox();
        jSeparator5 = new javax.swing.JSeparator();
        labelRankings = new javax.swing.JLabel();
        labelAdaptability = new javax.swing.JLabel();
        labelTerrainMovement = new javax.swing.JLabel();
        labelSky = new javax.swing.JLabel();
        labelGround = new javax.swing.JLabel();
        labelSpace = new javax.swing.JLabel();
        labelWater = new javax.swing.JLabel();
        labelUnderground = new javax.swing.JLabel();
        comboAdaptSky = new javax.swing.JComboBox();
        comboAdaptGround = new javax.swing.JComboBox();
        comboAdaptSpace = new javax.swing.JComboBox();
        comboAdaptWater = new javax.swing.JComboBox();
        comboMoveUnderground = new javax.swing.JComboBox();
        comboMoveWater = new javax.swing.JComboBox();
        comboMoveSpace = new javax.swing.JComboBox();
        comboMoveGround = new javax.swing.JComboBox();
        comboMoveSky = new javax.swing.JComboBox();
        comboSize = new javax.swing.JComboBox();
        labelSize = new javax.swing.JLabel();
        textfieldRewardPP = new javax.swing.JTextField();
        labelUnitRewardPP = new javax.swing.JLabel();
        panelWeapons = new javax.swing.JPanel();
        scrollWeapons = new javax.swing.JScrollPane();
        panelWeapList = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuitemOpen = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menuitemSave = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        menuitemClose = new javax.swing.JMenuItem();
        menuNavigate = new javax.swing.JMenu();
        menuitemPrevious = new javax.swing.JMenuItem();
        menuitemNext = new javax.swing.JMenuItem();
        menuitemFirst = new javax.swing.JMenuItem();
        menuitemLast = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SRW MXP Unit Editor v0.96 by Dashman");
        setResizable(false);

        panelNavigation.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Navigation", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(51, 102, 255))); // NOI18N

        buttonPrevious.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        buttonPrevious.setForeground(new java.awt.Color(102, 204, 0));
        buttonPrevious.setText("<<");
        buttonPrevious.setEnabled(false);
        buttonPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPreviousActionPerformed(evt);
            }
        });

        labelCurrent.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelCurrent.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelCurrent.setText("0 / 0");
        labelCurrent.setEnabled(false);

        buttonNext.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        buttonNext.setForeground(new java.awt.Color(102, 204, 0));
        buttonNext.setText(">>");
        buttonNext.setEnabled(false);
        buttonNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNextActionPerformed(evt);
            }
        });

        labelJumpTo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelJumpTo.setText("Jump to:");
        labelJumpTo.setEnabled(false);

        textfieldJump.setEnabled(false);
        textfieldJump.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textfieldJumpActionPerformed(evt);
            }
        });
        textfieldJump.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textfieldJumpKeyTyped(evt);
            }
        });

        buttonJump.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        buttonJump.setText("GO!");
        buttonJump.setEnabled(false);
        buttonJump.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonJumpActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelNavigationLayout = new javax.swing.GroupLayout(panelNavigation);
        panelNavigation.setLayout(panelNavigationLayout);
        panelNavigationLayout.setHorizontalGroup(
            panelNavigationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelNavigationLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonPrevious)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelCurrent, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonNext)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(labelJumpTo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(textfieldJump, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonJump)
                .addContainerGap())
        );
        panelNavigationLayout.setVerticalGroup(
            panelNavigationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelNavigationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelNavigationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonPrevious)
                    .addComponent(labelCurrent)
                    .addComponent(buttonNext)
                    .addComponent(labelJumpTo)
                    .addComponent(textfieldJump, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonJump))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelUnit.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Unit data", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(51, 102, 255))); // NOI18N

        labelUnitName.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelUnitName.setText("Unit name:");
        labelUnitName.setEnabled(false);

        labelUnitHP.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelUnitHP.setText("Base HP:");
        labelUnitHP.setEnabled(false);

        labelUnitEN.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelUnitEN.setText("Base EN:");
        labelUnitEN.setEnabled(false);

        labelUnitArmor.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelUnitArmor.setText("Base Armor:");
        labelUnitArmor.setEnabled(false);

        labelUnitMobility.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelUnitMobility.setText("Base Mobility:");
        labelUnitMobility.setEnabled(false);

        labelUnitMovement.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelUnitMovement.setText("Movement:");
        labelUnitMovement.setEnabled(false);

        textfieldHP.setEnabled(false);
        textfieldHP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textfieldHPKeyTyped(evt);
            }
        });

        textfieldEN.setEnabled(false);
        textfieldEN.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textfieldENKeyTyped(evt);
            }
        });

        textfieldArmor.setEnabled(false);
        textfieldArmor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textfieldArmorKeyTyped(evt);
            }
        });

        textfieldMobility.setEnabled(false);
        textfieldMobility.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textfieldMobilityKeyTyped(evt);
            }
        });

        textfieldMovement.setEnabled(false);
        textfieldMovement.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textfieldMovementKeyTyped(evt);
            }
        });

        labelUnitCost.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelUnitCost.setText("Repair cost:");
        labelUnitCost.setEnabled(false);

        textfieldCost.setEnabled(false);
        textfieldCost.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textfieldCostKeyTyped(evt);
            }
        });

        labelUnitRewardCash.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelUnitRewardCash.setText("Reward $:");
        labelUnitRewardCash.setEnabled(false);

        textfieldReward.setEnabled(false);
        textfieldReward.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textfieldRewardKeyTyped(evt);
            }
        });

        labelAbilities.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelAbilities.setText("Unit Abilities:");
        labelAbilities.setEnabled(false);

        labelAbility1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelAbility1.setText("Ability #1:");
        labelAbility1.setEnabled(false);

        labelAbility2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelAbility2.setText("Ability #2:");
        labelAbility2.setEnabled(false);

        labelAbility3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelAbility3.setText("Ability #3:");
        labelAbility3.setEnabled(false);

        labelAbility4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelAbility4.setText("Ability #4:");
        labelAbility4.setEnabled(false);

        comboAbility1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nothing", "Beam Coat", "I-Field", "I-Field (nu)", "Godhand Final", "Distortion Field", "AT Field", "Firewall", "Barrier", "Sound barrier", "Bunshin", "Mach Special", "God Shadow", "Illusion Flash", "Transform (1)", "Transform (2)", "Transform (3)", "Separate (1)", "Separate (2)", "Separate (3)", "Change frame? (1)", "Change frame? (2)", "Self-Combine", "Combine", "Dimension Coupling System", "Hyper Dendoh Dench (?)", "Hyper Plasma Drive", "Infinite Layer", "Hyper Scan", "Water running", "Rebirth", "EWAC (Strong)", "EWAC (Weak)", "Jammer", "Umbilical cord", "S2 Engine", "Rampage (1)", "Rampage (2)", "State change-resistant", "Phase transition engine", "Electromagnetic wave", "Resupply", "Repair", "HP Regen (big)", "HP Regen (small)", "EN Regen (big)", "EN Regen (small)", "Separate (3)", "Gravity wave beam", "Gravity wave beam (receive)", "Boson Jump", "Enhance parts use", "Open Get", "TE Sphere" }));
        comboAbility1.setEnabled(false);

        comboAbility2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nothing", "Beam Coat", "I-Field", "I-Field (nu)", "Godhand Final", "Distortion Field", "AT Field", "Firewall", "Barrier", "Sound barrier", "Bunshin", "Mach Special", "God Shadow", "Illusion Flash", "Transform (1)", "Transform (2)", "Transform (3)", "Separate (1)", "Separate (2)", "Separate (3)", "Change frame? (1)", "Change frame? (2)", "Self-Combine", "Combine", "Dimension Coupling System", "Hyper Dendoh Dench (?)", "Hyper Plasma Drive", "Infinite Layer", "Hyper Scan", "Water running", "Rebirth", "EWAC (Strong)", "EWAC (Weak)", "Jammer", "Umbilical cord", "S2 Engine", "Rampage (1)", "Rampage (2)", "State change-resistant", "Phase transition engine", "Electromagnetic wave", "Resupply", "Repair", "HP Regen (big)", "HP Regen (small)", "EN Regen (big)", "EN Regen (small)", "Separate (3)", "Gravity wave beam", "Gravity wave beam (receive)", "Boson Jump", "Enhance parts use", "Open Get", "TE Sphere" }));
        comboAbility2.setEnabled(false);

        comboAbility3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nothing", "Beam Coat", "I-Field", "I-Field (nu)", "Godhand Final", "Distortion Field", "AT Field", "Firewall", "Barrier", "Sound barrier", "Bunshin", "Mach Special", "God Shadow", "Illusion Flash", "Transform (1)", "Transform (2)", "Transform (3)", "Separate (1)", "Separate (2)", "Separate (3)", "Change frame? (1)", "Change frame? (2)", "Self-Combine", "Combine", "Dimension Coupling System", "Hyper Dendoh Dench (?)", "Hyper Plasma Drive", "Infinite Layer", "Hyper Scan", "Water running", "Rebirth", "EWAC (Strong)", "EWAC (Weak)", "Jammer", "Umbilical cord", "S2 Engine", "Rampage (1)", "Rampage (2)", "State change-resistant", "Phase transition engine", "Electromagnetic wave", "Resupply", "Repair", "HP Regen (big)", "HP Regen (small)", "EN Regen (big)", "EN Regen (small)", "Separate (3)", "Gravity wave beam", "Gravity wave beam (receive)", "Boson Jump", "Enhance parts use", "Open Get", "TE Sphere" }));
        comboAbility3.setEnabled(false);

        comboAbility4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nothing", "Beam Coat", "I-Field", "I-Field (nu)", "Godhand Final", "Distortion Field", "AT Field", "Firewall", "Barrier", "Sound barrier", "Bunshin", "Mach Special", "God Shadow", "Illusion Flash", "Transform (1)", "Transform (2)", "Transform (3)", "Separate (1)", "Separate (2)", "Separate (3)", "Change frame? (1)", "Change frame? (2)", "Self-Combine", "Combine", "Dimension Coupling System", "Hyper Dendoh Dench (?)", "Hyper Plasma Drive", "Infinite Layer", "Hyper Scan", "Water running", "Rebirth", "EWAC (Strong)", "EWAC (Weak)", "Jammer", "Umbilical cord", "S2 Engine", "Rampage (1)", "Rampage (2)", "State change-resistant", "Phase transition engine", "Electromagnetic wave", "Resupply", "Repair", "HP Regen (big)", "HP Regen (small)", "EN Regen (big)", "EN Regen (small)", "Separate (3)", "Gravity wave beam", "Gravity wave beam (receive)", "Boson Jump", "Enhance parts use", "Open Get", "TE Sphere" }));
        comboAbility4.setEnabled(false);

        labelSeriesID.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelSeriesID.setText("Series ID:");
        labelSeriesID.setEnabled(false);

        labelUnitParts.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelUnitParts.setText("Enhance Parts:");
        labelUnitParts.setEnabled(false);

        comboParts.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4" }));
        comboParts.setEnabled(false);

        labelRankings.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelRankings.setText("Terrain rankings:");
        labelRankings.setEnabled(false);

        labelAdaptability.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelAdaptability.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelAdaptability.setText("Adaptability:");
        labelAdaptability.setEnabled(false);

        labelTerrainMovement.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelTerrainMovement.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelTerrainMovement.setText("Movement:");
        labelTerrainMovement.setEnabled(false);

        labelSky.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelSky.setForeground(new java.awt.Color(51, 204, 0));
        labelSky.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelSky.setText("Sky:");
        labelSky.setEnabled(false);

        labelGround.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelGround.setForeground(new java.awt.Color(204, 153, 0));
        labelGround.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelGround.setText("Ground:");
        labelGround.setEnabled(false);

        labelSpace.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelSpace.setForeground(new java.awt.Color(204, 0, 204));
        labelSpace.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelSpace.setText("Space:");
        labelSpace.setEnabled(false);

        labelWater.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelWater.setForeground(new java.awt.Color(0, 153, 204));
        labelWater.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelWater.setText("Water:");
        labelWater.setEnabled(false);

        labelUnderground.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelUnderground.setForeground(new java.awt.Color(153, 102, 0));
        labelUnderground.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelUnderground.setText("Undergr.:");
        labelUnderground.setEnabled(false);

        comboAdaptSky.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "C", "B", "A", "S" }));
        comboAdaptSky.setEnabled(false);

        comboAdaptGround.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "C", "B", "A", "S" }));
        comboAdaptGround.setEnabled(false);

        comboAdaptSpace.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "C", "B", "A", "S" }));
        comboAdaptSpace.setEnabled(false);

        comboAdaptWater.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "C", "B", "A", "S" }));
        comboAdaptWater.setEnabled(false);

        comboMoveUnderground.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "B", "A" }));
        comboMoveUnderground.setEnabled(false);

        comboMoveWater.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "B", "A" }));
        comboMoveWater.setEnabled(false);

        comboMoveSpace.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "B", "A" }));
        comboMoveSpace.setEnabled(false);

        comboMoveGround.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "B", "A" }));
        comboMoveGround.setEnabled(false);

        comboMoveSky.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-", "B", "A" }));
        comboMoveSky.setEnabled(false);

        comboSize.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "SS", "S", "M", "L", "LL" }));
        comboSize.setEnabled(false);

        labelSize.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelSize.setText("Size:");
        labelSize.setEnabled(false);

        textfieldRewardPP.setEnabled(false);
        textfieldRewardPP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textfieldRewardPPKeyTyped(evt);
            }
        });

        labelUnitRewardPP.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelUnitRewardPP.setText("Reward PP:");
        labelUnitRewardPP.setEnabled(false);

        javax.swing.GroupLayout panelUnitLayout = new javax.swing.GroupLayout(panelUnit);
        panelUnit.setLayout(panelUnitLayout);
        panelUnitLayout.setHorizontalGroup(
            panelUnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelUnitLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelUnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelUnitLayout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addGroup(panelUnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(panelUnitLayout.createSequentialGroup()
                                .addComponent(labelSize)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(comboSize, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(labelUnitParts)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(comboParts, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelUnitLayout.createSequentialGroup()
                                .addGroup(panelUnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(labelUnitMovement, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(labelUnitHP, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(labelUnitMobility, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(labelUnitArmor, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(labelUnitEN, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labelUnitCost, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelUnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(textfieldHP, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(textfieldEN, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(textfieldArmor, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(textfieldMobility, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(textfieldMovement, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(textfieldCost, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(panelUnitLayout.createSequentialGroup()
                                .addComponent(labelUnitRewardCash, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textfieldReward, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(labelUnitRewardPP, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textfieldRewardPP)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panelUnitLayout.createSequentialGroup()
                        .addGroup(panelUnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelUnitLayout.createSequentialGroup()
                                .addGroup(panelUnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(labelTerrainMovement, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(labelAdaptability, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(labelRankings, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelUnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(comboMoveSky, 0, 50, Short.MAX_VALUE)
                                    .addComponent(labelSky, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(comboAdaptSky, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelUnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(comboMoveGround, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(labelGround, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                                    .addComponent(comboAdaptGround, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelUnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelUnitLayout.createSequentialGroup()
                                        .addComponent(comboMoveSpace, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(comboMoveWater, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(comboMoveUnderground, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 13, Short.MAX_VALUE))
                                    .addGroup(panelUnitLayout.createSequentialGroup()
                                        .addGroup(panelUnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(labelSpace, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                                            .addComponent(comboAdaptSpace, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(panelUnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(labelWater, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                                            .addComponent(comboAdaptWater, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(labelUnderground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addComponent(jSeparator3)
                            .addGroup(panelUnitLayout.createSequentialGroup()
                                .addComponent(labelUnitName, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jSeparator4)
                            .addGroup(panelUnitLayout.createSequentialGroup()
                                .addComponent(labelAbility2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboAbility2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(panelUnitLayout.createSequentialGroup()
                                .addComponent(labelAbility3, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboAbility3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(panelUnitLayout.createSequentialGroup()
                                .addComponent(labelAbility4, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboAbility4, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(panelUnitLayout.createSequentialGroup()
                                .addGroup(panelUnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(labelAbilities, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
                                    .addComponent(labelAbility1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(comboAbility1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(panelUnitLayout.createSequentialGroup()
                                .addComponent(labelSeriesID, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelSeries, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jSeparator5, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addContainerGap())))
        );
        panelUnitLayout.setVerticalGroup(
            panelUnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelUnitLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelUnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelUnitName)
                    .addComponent(labelName, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelUnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelSeriesID)
                    .addComponent(labelSeries, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelUnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelUnitHP)
                    .addComponent(textfieldHP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelUnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelUnitEN)
                    .addComponent(textfieldEN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelUnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelUnitArmor)
                    .addComponent(textfieldArmor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelUnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelUnitMobility)
                    .addComponent(textfieldMobility, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelUnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelUnitMovement)
                    .addComponent(textfieldMovement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelUnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelUnitCost)
                    .addComponent(textfieldCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelUnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelUnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labelUnitRewardPP)
                        .addComponent(textfieldRewardPP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelUnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labelUnitRewardCash)
                        .addComponent(textfieldReward, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelUnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelUnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labelSize)
                        .addComponent(comboSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelUnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labelUnitParts)
                        .addComponent(comboParts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelUnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelUnitLayout.createSequentialGroup()
                        .addComponent(labelAbilities)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelUnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelAbility1)
                            .addComponent(comboAbility1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelUnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelAbility2)
                            .addComponent(comboAbility2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelUnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelAbility3)
                            .addComponent(comboAbility3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelUnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelAbility4)
                            .addComponent(comboAbility4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelUnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelRankings)
                            .addComponent(labelSky)
                            .addComponent(labelGround)
                            .addComponent(labelSpace)
                            .addComponent(labelWater)
                            .addComponent(labelUnderground))
                        .addGap(18, 18, 18)
                        .addGroup(panelUnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelAdaptability)
                            .addComponent(comboAdaptSky, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboAdaptGround, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboAdaptSpace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboAdaptWater, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(labelTerrainMovement))
                    .addGroup(panelUnitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(comboMoveSky, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(comboMoveGround, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(comboMoveSpace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(comboMoveWater, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(comboMoveUnderground, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        panelWeapons.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Unit weapons", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(51, 102, 255))); // NOI18N

        panelWeapList.setPreferredSize(new java.awt.Dimension(450, 650));

        javax.swing.GroupLayout panelWeapListLayout = new javax.swing.GroupLayout(panelWeapList);
        panelWeapList.setLayout(panelWeapListLayout);
        panelWeapListLayout.setHorizontalGroup(
            panelWeapListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 461, Short.MAX_VALUE)
        );
        panelWeapListLayout.setVerticalGroup(
            panelWeapListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 662, Short.MAX_VALUE)
        );

        scrollWeapons.setViewportView(panelWeapList);

        javax.swing.GroupLayout panelWeaponsLayout = new javax.swing.GroupLayout(panelWeapons);
        panelWeapons.setLayout(panelWeaponsLayout);
        panelWeaponsLayout.setHorizontalGroup(
            panelWeaponsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelWeaponsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollWeapons, javax.swing.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelWeaponsLayout.setVerticalGroup(
            panelWeaponsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelWeaponsLayout.createSequentialGroup()
                .addComponent(scrollWeapons, javax.swing.GroupLayout.DEFAULT_SIZE, 664, Short.MAX_VALUE)
                .addContainerGap())
        );

        menuFile.setText("File");

        menuitemOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        menuitemOpen.setText("Open...");
        menuitemOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemOpenActionPerformed(evt);
            }
        });
        menuFile.add(menuitemOpen);
        menuFile.add(jSeparator1);

        menuitemSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menuitemSave.setText("Patch unit data...");
        menuitemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemSaveActionPerformed(evt);
            }
        });
        menuFile.add(menuitemSave);
        menuFile.add(jSeparator2);

        menuitemClose.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        menuitemClose.setText("Exit");
        menuitemClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemCloseActionPerformed(evt);
            }
        });
        menuFile.add(menuitemClose);

        jMenuBar1.add(menuFile);

        menuNavigate.setText("Navigate");

        menuitemPrevious.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_PAGE_UP, 0));
        menuitemPrevious.setText("Previous");
        menuitemPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemPreviousActionPerformed(evt);
            }
        });
        menuNavigate.add(menuitemPrevious);

        menuitemNext.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_PAGE_DOWN, 0));
        menuitemNext.setText("Next");
        menuitemNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemNextActionPerformed(evt);
            }
        });
        menuNavigate.add(menuitemNext);

        menuitemFirst.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_HOME, java.awt.event.InputEvent.CTRL_MASK));
        menuitemFirst.setText("First");
        menuitemFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemFirstActionPerformed(evt);
            }
        });
        menuNavigate.add(menuitemFirst);

        menuitemLast.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_END, java.awt.event.InputEvent.CTRL_MASK));
        menuitemLast.setText("Last");
        menuitemLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemLastActionPerformed(evt);
            }
        });
        menuNavigate.add(menuitemLast);

        jMenuBar1.add(menuNavigate);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelNavigation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelUnit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelWeapons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panelWeapons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelNavigation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelUnit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuitemOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemOpenActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File(lastDirectory));
        chooser.setDialogTitle("Load BIN file");
        chooser.setFileFilter(new FileNameExtensionFilter("BIN file", "BIN"));
        if (!current_file.isEmpty())
            chooser.setSelectedFile(new File(current_file));

        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
            current_file = chooser.getSelectedFile().getName();

            openFile(chooser.getSelectedFile().getAbsolutePath());

            lastDirectory = chooser.getSelectedFile().getPath();
        }
    }//GEN-LAST:event_menuitemOpenActionPerformed

    private void menuitemSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemSaveActionPerformed
        // TODO add your handling code here:
        if (file_loaded){
            JFileChooser chooser = new JFileChooser();
            chooser.setCurrentDirectory(new java.io.File(lastDirectory));
            chooser.setDialogTitle("Patch BIN file");
            chooser.setFileFilter(new FileNameExtensionFilter("BIN file", "BIN"));
            if (!current_file.isEmpty())
                chooser.setSelectedFile(new File(current_file));

            saveUnit(); // Save the current dialogue, just in case.

            if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
                current_file = chooser.getSelectedFile().getName();

                saveFile(chooser.getSelectedFile().getAbsolutePath());

                lastDirectory = chooser.getSelectedFile().getPath();
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "No file loaded!",
                "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuitemSaveActionPerformed

    private void menuitemCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemCloseActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_menuitemCloseActionPerformed

    private void menuitemPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemPreviousActionPerformed
        // TODO add your handling code here:
        if (buttonPrevious.isEnabled())
            buttonPrevious.doClick();
    }//GEN-LAST:event_menuitemPreviousActionPerformed

    private void menuitemNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemNextActionPerformed
        // TODO add your handling code here:
        if (buttonNext.isEnabled())
            buttonNext.doClick();
    }//GEN-LAST:event_menuitemNextActionPerformed

    private void menuitemFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemFirstActionPerformed
        // TODO add your handling code here:
        jumpTo(0);
    }//GEN-LAST:event_menuitemFirstActionPerformed

    private void menuitemLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemLastActionPerformed
        // TODO add your handling code here:
        if (units.length != 0)
            jumpTo(units.length);
    }//GEN-LAST:event_menuitemLastActionPerformed

    private void buttonPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPreviousActionPerformed
        // TODO add your handling code here:
        changePage(-1);
    }//GEN-LAST:event_buttonPreviousActionPerformed

    private void buttonNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNextActionPerformed
        // TODO add your handling code here:
        changePage(1);
    }//GEN-LAST:event_buttonNextActionPerformed

    private void textfieldJumpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textfieldJumpActionPerformed
        // TODO add your handling code here:
        buttonJump.doClick();
    }//GEN-LAST:event_textfieldJumpActionPerformed

    private void buttonJumpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonJumpActionPerformed
        // TODO add your handling code here:
        int num_page = Integer.valueOf(textfieldJump.getText());
        jumpTo(num_page - 1);   // We give the illusion that we count pages starting from 1
    }//GEN-LAST:event_buttonJumpActionPerformed

    private void textfieldJumpKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textfieldJumpKeyTyped
        // TODO add your handling code here:
        if (evt.getKeyChar() < '0' || evt.getKeyChar() > '9')
            evt.consume();
    }//GEN-LAST:event_textfieldJumpKeyTyped

    private void textfieldHPKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textfieldHPKeyTyped
        // TODO add your handling code here:
        if (evt.getKeyChar() < '0' || evt.getKeyChar() > '9')
            evt.consume();
    }//GEN-LAST:event_textfieldHPKeyTyped

    private void textfieldENKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textfieldENKeyTyped
        // TODO add your handling code here:
        if (evt.getKeyChar() < '0' || evt.getKeyChar() > '9')
            evt.consume();
    }//GEN-LAST:event_textfieldENKeyTyped

    private void textfieldArmorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textfieldArmorKeyTyped
        // TODO add your handling code here:
        if (evt.getKeyChar() < '0' || evt.getKeyChar() > '9')
            evt.consume();
    }//GEN-LAST:event_textfieldArmorKeyTyped

    private void textfieldMobilityKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textfieldMobilityKeyTyped
        // TODO add your handling code here:
        if (evt.getKeyChar() < '0' || evt.getKeyChar() > '9')
            evt.consume();
    }//GEN-LAST:event_textfieldMobilityKeyTyped

    private void textfieldMovementKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textfieldMovementKeyTyped
        // TODO add your handling code here:
        if (evt.getKeyChar() < '0' || evt.getKeyChar() > '9')
            evt.consume();
    }//GEN-LAST:event_textfieldMovementKeyTyped

    private void textfieldCostKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textfieldCostKeyTyped
        // TODO add your handling code here:
        if (evt.getKeyChar() < '0' || evt.getKeyChar() > '9')
            evt.consume();
    }//GEN-LAST:event_textfieldCostKeyTyped

    private void textfieldRewardKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textfieldRewardKeyTyped
        // TODO add your handling code here:
        if (evt.getKeyChar() < '0' || evt.getKeyChar() > '9')
            evt.consume();
    }//GEN-LAST:event_textfieldRewardKeyTyped

    private void textfieldRewardPPKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textfieldRewardPPKeyTyped
        // TODO add your handling code here:
        if (evt.getKeyChar() < '0' || evt.getKeyChar() > '9')
            evt.consume();
    }//GEN-LAST:event_textfieldRewardPPKeyTyped

    
        
    public void openFile(String bin_file){
        parseFile(bin_file);

        labelCurrent.setEnabled(file_loaded);
        labelJumpTo.setEnabled(file_loaded);
        textfieldJump.setEnabled(file_loaded);
        buttonJump.setEnabled(file_loaded);
        
        labelUnitName.setEnabled(file_loaded);
        labelSeriesID.setEnabled(file_loaded);
        
        labelUnitHP.setEnabled(file_loaded);
        labelUnitEN.setEnabled(file_loaded);
        labelUnitArmor.setEnabled(file_loaded);
        labelUnitMobility.setEnabled(file_loaded);
        labelUnitMovement.setEnabled(file_loaded);
        labelUnitCost.setEnabled(file_loaded);
        labelUnitRewardCash.setEnabled(file_loaded);
        labelUnitRewardPP.setEnabled(file_loaded);
        
        textfieldHP.setEnabled(file_loaded);
        textfieldEN.setEnabled(file_loaded);
        textfieldArmor.setEnabled(file_loaded);
        textfieldMobility.setEnabled(file_loaded);
        textfieldMovement.setEnabled(file_loaded);
        textfieldCost.setEnabled(file_loaded);
        textfieldReward.setEnabled(file_loaded);
        textfieldRewardPP.setEnabled(file_loaded);
        
        labelAbilities.setEnabled(file_loaded);
        labelAbility1.setEnabled(file_loaded);
        labelAbility2.setEnabled(file_loaded);
        labelAbility3.setEnabled(file_loaded);
        labelAbility4.setEnabled(file_loaded);
        comboAbility1.setEnabled(file_loaded);
        comboAbility2.setEnabled(file_loaded);
        comboAbility3.setEnabled(file_loaded);
        comboAbility4.setEnabled(file_loaded);
        
        labelSize.setEnabled(file_loaded);
        comboSize.setEnabled(file_loaded);
        
        labelUnitParts.setEnabled(file_loaded);
        comboParts.setEnabled(file_loaded);
        
        labelRankings.setEnabled(file_loaded);
        labelSky.setEnabled(file_loaded);
        labelGround.setEnabled(file_loaded);
        labelSpace.setEnabled(file_loaded);
        labelWater.setEnabled(file_loaded);
        labelUnderground.setEnabled(file_loaded);
        labelAdaptability.setEnabled(file_loaded);
        labelTerrainMovement.setEnabled(file_loaded);
        
        comboAdaptSky.setEnabled(file_loaded);
        comboAdaptGround.setEnabled(file_loaded);
        comboAdaptSpace.setEnabled(file_loaded);
        comboAdaptWater.setEnabled(file_loaded);
        
        comboMoveSky.setEnabled(file_loaded);
        comboMoveGround.setEnabled(file_loaded);
        comboMoveSpace.setEnabled(file_loaded);
        comboMoveWater.setEnabled(file_loaded);
        comboMoveUnderground.setEnabled(file_loaded);

        current_unit = 0;

        updateControls();

        if (!file_loaded){
            labelSeries.setText("");
            labelName.setText("");
            textfieldHP.setText("");
            textfieldEN.setText("");
            textfieldArmor.setText("");
            textfieldMobility.setText("");
            textfieldMovement.setText("");
            textfieldCost.setText("");
            textfieldReward.setText("");
            textfieldRewardPP.setText("");
            
            labelCurrent.setText("0 / 0");
            buttonNext.setEnabled(false);   // updateControls() doesn't take into account there's no data anymore
            //this.setTitle(title);

            JOptionPane.showMessageDialog(null, "The file didn't have any battle text!",
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
        else{
            //this.setTitle(current_file + " - " + title);
            loadUnit();
        }
    }
    
    
    public void parseFile(String path){
        RandomAccessFile f;
        file_loaded = false;

        try {
            f = new RandomAccessFile(path, "r");
            byte[] aux = new byte[4];
            
            // Parse units
            f.seek(unit_offset);
            
            f.read(aux);
            
            if (aux[0] != 'U' || aux[1] != 'n' || aux[2] != 'i' || aux[3] != 't'){
                f.close();

                JOptionPane.showMessageDialog(null, "No unit data in this file.",
                    "Error", JOptionPane.ERROR_MESSAGE);

                return;
            }
            
            aux = new byte[124];
            
            f.skipBytes(8);
            
            units = new UnitData[512];
                        
            for (int i = 0; i < units.length; i++){
                f.read(aux);
                
                int series = (aux[10] & 0xff);
                
                int hp = (aux[12] & 0xff) + ( (aux[13] & 0xff) << 8 ) 
                        + ( (aux[14] & 0xff) << 16 ) + ( (aux[15] & 0xff) << 24 );
                int en = (aux[16] & 0xff) + ( (aux[17] & 0xff) << 8 );
                int armor = (aux[18] & 0xff) + ( (aux[19] & 0xff) << 8 );
                int mob = (aux[20] & 0xff);
                int move = (aux[21] & 0xff);
                int cost = (aux[24] & 0xff) + ( (aux[25] & 0xff) << 8 );
                int reward = (aux[26] & 0xff) + ( (aux[27] & 0xff) << 8 );
                
                int pp = (aux[29] & 0xff);
                
                //if (pp > 1)
                //    System.out.println(i + " unit has a pp of " + pp);
                
                int[] weap = new int[16];
                
                for (int j = 0; j < weap.length; j++){
                    weap[j] = (aux[32 + j*2] & 0xff) + ( (aux[33 + j*2] & 0xff) << 8 );
                }
                
                int a1 = (aux[88] & 0xff);
                int a2 = (aux[89] & 0xff);
                int a3 = (aux[90] & 0xff);
                int a4 = (aux[91] & 0xff);
                
                int parts = (aux[95] & 0xff);
                
                int ratings = (aux[112] & 0xff) + ( (aux[113] & 0xff) << 8 ) 
                        + ( (aux[114] & 0xff) << 16 ) + ( (aux[115] & 0xff) << 24 );
                
                UnitData ud = new UnitData(series, hp, en, armor, mob, move, cost, 
                        reward, pp, a1, a2, a3, a4, parts, ratings, weap);
                
                units[i] = ud;
            }
            
            
            // Parse weapons
            f.seek(weap_offset);
            
            aux = new byte[4];
            
            f.read(aux);
            
            if (aux[0] != 'W' || aux[1] != 'e' || aux[2] != 'a' || aux[3] != 'p'){
                f.close();

                JOptionPane.showMessageDialog(null, "No weapon data in this file.",
                    "Error", JOptionPane.ERROR_MESSAGE);

                return;
            }
            
            aux = new byte[48];
            
            f.skipBytes(8);
            
            weapons = new WeaponData[1024];
                        
            for (int i = 0; i < weapons.length; i++){
                f.read(aux);
                
                int min = (aux[4] & 0xff);
                int max = (aux[5] & 0xff);
                int map_type = (aux[6] & 0xff);
                int ammo = (aux[7] & 0xff);
                int power = (aux[8] & 0xff) + ( (aux[9] & 0xff) << 8 );
                int hit = (aux[10] & 0xff);
                
                if (aux[11] == 0xff)
                    hit *= -1;
                
                int crit = (aux[12] & 0xff);
                
                if (aux[13] == 0xff)
                    crit *= -1;
                
                int en_cost = (aux[14] & 0xff);
                int will = (aux[15] & 0xff);
                
                int nt = (aux[16] & 0xff);
                
                int status_effect = (aux[17] & 0xff);
                
                int byte40 = (aux[40] & 0xff);
                int byte41 = (aux[41] & 0xff);
                int byte42 = (aux[42] & 0xff);
                int byte44 = (aux[44] & 0xff);
                int byte45 = (aux[45] & 0xff);
                int byte46 = (aux[46] & 0xff);
                
                WeaponData wd = new WeaponData(power, min, max, map_type, ammo, en_cost, will, hit, 
                        crit, nt, status_effect, byte40, byte41, byte42, byte44, byte45, byte46);
                
                weapons[i] = wd;
                
                //if (status_effect != 0)
                //    System.out.println(i + ": " + status_effect);
            }

            f.close();
            
            // Enable navigation
            file_loaded = true;
            labelCurrent.setEnabled(true);
            labelJumpTo.setEnabled(true);
            textfieldJump.setEnabled(true);
            buttonJump.setEnabled(true);

            // Load first set of lines
            current_unit = 0;
            updateControls();
            loadUnit();

        } catch (IOException ex) {
            Logger.getLogger(UserInterfaceUE.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
    public void saveFile(String path){
        try{
            // Write everything into the file
            RandomAccessFile f = new RandomAccessFile(path, "r");
            
            byte[] first_section = new byte[unit_offset];
            byte[] data = new byte[63500];
            byte[] data_weapon = new byte[49164];
            byte[] last_section = new byte[(int) f.length() - first_section.length - data.length - data_weapon.length];
            
            f.read(first_section);
            f.read(data);
            f.read(data_weapon);
            f.read(last_section);
            
            f.close();

            if (data[0] != 'U' || data[1] != 'n' || data[2] != 'i' || data[3] != 't'){
                JOptionPane.showMessageDialog(null, "No unit data in this file.",
                    "Error", JOptionPane.ERROR_MESSAGE);

                return;
            }
            
            if (data_weapon[0] != 'W' || data_weapon[1] != 'e' || data_weapon[2] != 'a' || data_weapon[3] != 'p'){
                JOptionPane.showMessageDialog(null, "No unit weapon data in this file.",
                    "Error", JOptionPane.ERROR_MESSAGE);

                return;
            }
            
            
            // Modify the unit vales in the data
            int offset = 12;
            for (int i = 0; i < units.length; i++){
                data[offset + 12] = (byte) ( units[i].HP & 0xff );
                data[offset + 13] = (byte) ( (units[i].HP >> 8) & 0xff );
                data[offset + 14] = (byte) ( (units[i].HP >> 16) & 0xff );
                data[offset + 15] = (byte) ( (units[i].HP >> 24) & 0xff );
                
                data[offset + 16] = (byte) ( units[i].EN & 0xff );
                data[offset + 17] = (byte) ( (units[i].EN >> 8) & 0xff );
                
                data[offset + 18] = (byte) ( units[i].armor & 0xff );
                data[offset + 19] = (byte) ( (units[i].armor >> 8) & 0xff );
                
                data[offset + 20] = (byte) ( units[i].mobility & 0xff );
                
                data[offset + 21] = (byte) ( units[i].movement & 0xff );
                
                data[offset + 24] = (byte) ( units[i].cost & 0xff );
                data[offset + 25] = (byte) ( (units[i].cost >> 8) & 0xff );
                
                data[offset + 26] = (byte) ( units[i].reward & 0xff );
                data[offset + 27] = (byte) ( (units[i].reward >> 8) & 0xff );
                
                data[offset + 29] = (byte) ( units[i].reward_pp & 0xff );
                
                data[offset + 88] = (byte) ( units[i].ability1 & 0xff );
                data[offset + 89] = (byte) ( units[i].ability2 & 0xff );
                data[offset + 90] = (byte) ( units[i].ability3 & 0xff );
                data[offset + 91] = (byte) ( units[i].ability4 & 0xff );
                
                data[offset + 95] = (byte) ( units[i].num_parts & 0xff );
                
                data[offset + 112] = (byte) ( units[i].ratings & 0xff );
                data[offset + 113] = (byte) ( (units[i].ratings >> 8) & 0xff );
                data[offset + 114] = (byte) ( (units[i].ratings >> 16) & 0xff );
                data[offset + 115] = (byte) ( (units[i].ratings >> 24) & 0xff );
                
                offset += 124;
            }
            
            // Modify the weapon vales in the data
            offset = 12;
            for (int i = 0; i < weapons.length; i++){
                data_weapon[offset + 4] = (byte) ( weapons[i].min_range & 0xff );
                
                data_weapon[offset + 5] = (byte) ( weapons[i].max_range & 0xff );
                
                data_weapon[offset + 6] = (byte) ( weapons[i].map_type & 0xff );
                
                data_weapon[offset + 7] = (byte) ( weapons[i].ammo & 0xff );
                
                data_weapon[offset + 8] = (byte) ( weapons[i].power & 0xff );
                data_weapon[offset + 9] = (byte) ( (weapons[i].power >> 8) & 0xff );
                
                data_weapon[offset + 10] = (byte) ( weapons[i].hit & 0xff );
                data_weapon[offset + 11] = (byte) ( (weapons[i].hit >> 8) & 0xff );
                
                data_weapon[offset + 12] = (byte) ( weapons[i].critical & 0xff );
                data_weapon[offset + 13] = (byte) ( (weapons[i].critical >> 8) & 0xff );
                
                data_weapon[offset + 14] = (byte) ( weapons[i].en_cost & 0xff );
                
                data_weapon[offset + 15] = (byte) ( weapons[i].will & 0xff );
                
                data_weapon[offset + 16] = (byte) ( weapons[i].NT_lvl & 0xff );
                
                data_weapon[offset + 17] = (byte) ( weapons[i].status & 0xff );
                
                data_weapon[offset + 40] = (byte) ( weapons[i].flags40 & 0xff );
                data_weapon[offset + 41] = (byte) ( weapons[i].flags41 & 0xff );
                data_weapon[offset + 42] = (byte) ( weapons[i].flags42 & 0xff );
                data_weapon[offset + 44] = (byte) ( weapons[i].flags44 & 0xff );
                data_weapon[offset + 45] = (byte) ( weapons[i].flags45 & 0xff );
                data_weapon[offset + 46] = (byte) ( weapons[i].flags46 & 0xff );
                
                offset += 48;
            }
            
            
            // Write everything
            f = new RandomAccessFile(path, "rw");
            
            f.write(first_section);
            f.write(data);
            f.write(data_weapon);
            f.write(last_section);

            f.close();

            System.out.println("File " + path + " patched successfully.");    // END

        } catch(IOException ex){
            JOptionPane.showMessageDialog(null, "Could not write file to disk!",
                    "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(UserInterfaceUE.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
        
    public void saveUnit(){
        units[current_unit].HP = Integer.valueOf(textfieldHP.getText());
        units[current_unit].EN = Integer.valueOf(textfieldEN.getText());
        units[current_unit].armor = Integer.valueOf(textfieldArmor.getText());
        units[current_unit].mobility = Integer.valueOf(textfieldMobility.getText());
        units[current_unit].movement = Integer.valueOf(textfieldMovement.getText());
        units[current_unit].cost = Integer.valueOf(textfieldCost.getText());
        units[current_unit].reward = Integer.valueOf(textfieldReward.getText());
        units[current_unit].reward_pp = Integer.valueOf(textfieldRewardPP.getText());
        
        units[current_unit].ability1 = comboAbility1.getSelectedIndex();
        units[current_unit].ability2 = comboAbility2.getSelectedIndex();
        units[current_unit].ability3 = comboAbility3.getSelectedIndex();
        units[current_unit].ability4 = comboAbility4.getSelectedIndex();
        
        units[current_unit].num_parts = comboParts.getSelectedIndex();
        
        
        // SIZE ----------------------------------------------
        int size = comboSize.getSelectedIndex();
        
        units[current_unit].ratings &= 0xFE3FFFFF;    // Set bits 23-25 to 0
        
        switch (size){
            case 0: // SS
                break;
            case 1: // S
                units[current_unit].ratings |= 0x400000;    // Set bit 23 to 1
                break;
            case 2: // M
                units[current_unit].ratings |= 0x800000;    // Set bit 24 to 1
                break;
            case 3: // L
                units[current_unit].ratings |= 0xc00000;    // Set bits 23-24 to 1
                break;
            case 4: // LL
                units[current_unit].ratings |= 0x1000000;    // Set bits 25 to 1
                break;
        }
        
        
        // ADAPTABILITY Ratings --------------------------------------
        
        int sky = comboAdaptSky.getSelectedIndex();
        
        units[current_unit].ratings &= 0xFFFFFFF8;    // Set bits 1-3 to 0
        
        switch (sky){
            case 0: // Nothing
                break;
            case 1: // C
                units[current_unit].ratings |= 4;    // Set bit 3 to 1
                break;
            case 2: // B
                units[current_unit].ratings |= 3;    // Set bits 2-1 to 1
                break;
            case 3: // A
                units[current_unit].ratings |= 2;    // Set bit 2 to 1
                break;
            case 4: // S
                units[current_unit].ratings |= 1;    // Set bit 1 to 1
                break;
        }
        
        int ground = comboAdaptGround.getSelectedIndex();
        
        units[current_unit].ratings &= 0xFFFFFFC7;    // Set bits 4-6 to 0
        
        switch (ground){
            case 0: // Nothing
                break;
            case 1: // C
                units[current_unit].ratings |= 0x20;    // Set bit 6 to 1
                break;
            case 2: // B
                units[current_unit].ratings |= 0x18;    // Set bits 4-5 to 1
                break;
            case 3: // A
                units[current_unit].ratings |= 0x10;    // Set bit 5 to 1
                break;
            case 4: // S
                units[current_unit].ratings |= 0x8;    // Set bit 4 to 1
                break;
        }
        
        int space = comboAdaptSpace.getSelectedIndex();
        
        units[current_unit].ratings &= 0xfffff1ff;    // Set bits 10-12 to 0
        
        switch (space){
            case 0: // Nothing
                break;
            case 1: // C
                units[current_unit].ratings |= 0x800;    // Set bit 12 to 1
                break;
            case 2: // B
                units[current_unit].ratings |= 0x600;    // Set bits 10-11 to 1
                break;
            case 3: // A
                units[current_unit].ratings |= 0x400;    // Set bit 11 to 1
                break;
            case 4: // S
                units[current_unit].ratings |= 0x200;    // Set bit 10 to 1
                break;
        }
        
        int water = comboAdaptWater.getSelectedIndex();
        
        units[current_unit].ratings &= 0xfffffe3f;    // Set bits 7-9 to 0
        
        switch (water){
            case 0: // Nothing
                break;
            case 1: // C
                units[current_unit].ratings |= 0x100;    // Set bit 9 to 1
                break;
            case 2: // B
                units[current_unit].ratings |= 0xC0;    // Set bits 7-8 to 1
                break;
            case 3: // A
                units[current_unit].ratings |= 0x80;    // Set bit 8 to 1
                break;
            case 4: // S
                units[current_unit].ratings |= 0x40;    // Set bit 7 to 1
                break;
        }
        
        
        // MOVEMENT Ratings -----------------------------------
        
        sky = comboMoveSky.getSelectedIndex();
        
        units[current_unit].ratings &= 0xffffcfff;    // Set bits 13-14 to 0
        
        switch (sky){
            case 0: // Nothing
                break;
            case 1: // B
                units[current_unit].ratings |= 0x2000;    // Set bit 14 to 1
                break;
            case 2: // A
                units[current_unit].ratings |= 0x1000;    // Set bit 13 to 1
                break;
        }
        
        ground = comboMoveGround.getSelectedIndex();
        
        units[current_unit].ratings &= 0xffff3fff;    // Set bits 15-16 to 0
        
        switch (ground){
            case 0: // Nothing
                break;
            case 1: // B
                units[current_unit].ratings |= 0x8000;    // Set bit 16 to 1
                break;
            case 2: // A
                units[current_unit].ratings |= 0x4000;    // Set bit 15 to 1
                break;
        }
        
        space = comboMoveSpace.getSelectedIndex();
        
        units[current_unit].ratings &= 0xfff3ffff;    // Set bits 19-20 to 0
        
        switch (space){
            case 0: // Nothing
                break;
            case 1: // B
                units[current_unit].ratings |= 0x80000;    // Set bit 16 to 1
                break;
            case 2: // A
                units[current_unit].ratings |= 0x40000;    // Set bit 15 to 1
                break;
        }
        
        water = comboMoveWater.getSelectedIndex();
        
        units[current_unit].ratings &= 0xfffcffff;    // Set bits 17-18 to 0        
        
        switch (water){
            case 0: // Nothing
                break;
            case 1: // B
                units[current_unit].ratings |= 0x20000;    // Set bit 18 to 1
                break;
            case 2: // A
                units[current_unit].ratings |= 0x10000;    // Set bit 13 to 1
                break;
        }
        
        int underground = comboMoveUnderground.getSelectedIndex();
        
        units[current_unit].ratings &= 0xffcfffff;    // Set bits 25-26 to 0 
        
        switch (underground){
            case 0: // Nothing
                break;
            case 1: // B
                units[current_unit].ratings |= 0x200000;    // Set bit 26 to 1
                break;
            case 2: // A
                units[current_unit].ratings |= 0x100000;    // Set bit 25 to 1
                break;
        }
        
        
        saveWeapons();
    }
    
    
    public void saveWeapons(){
        Component[] panels = panelWeapList.getComponents();
        
        for (int i = 0; i < panels.length; i++){
            WeaponPanel pw = (WeaponPanel) panels[i];
            
            int id = pw.getID();
            
            if (id > 0){    // Weapon 0 is set to all zeroes. Better keep it that way.
                weapons[id].power = pw.getPower();
                weapons[id].min_range = pw.getMinRange();
                weapons[id].max_range = pw.getMaxRange();
                weapons[id].hit = pw.getHit();
                weapons[id].critical = pw.getCrit();
                weapons[id].ammo = pw.getAmmo();
                weapons[id].en_cost = pw.getEN();
                weapons[id].will = pw.getWill();
                weapons[id].NT_lvl = pw.getNT();
                
                
                // Update P property
                boolean postm = pw.getP();
                
                if (postm)
                    weapons[id].flags44 |= 2;
                else
                    weapons[id].flags44 &= 0xfd;
                
                
                // Update W property
                boolean doub = pw.getW();
                
                if (doub)
                    weapons[id].flags44 |= 1;
                else
                    weapons[id].flags44 &= 0xfe;
                
                
                // Update Missile property
                boolean msl = pw.getMissile();
                
                if (msl)
                    weapons[id].flags44 |= 4;
                else
                    weapons[id].flags44 &= 0xfb;
                
                
                // Update Building property
                boolean bld = pw.getBuilding();
                
                if (bld)
                    weapons[id].flags44 |= 0x40;
                else
                    weapons[id].flags44 &= 0xbf;
                
                
                // Update map / assist property
                int map = pw.getMapAssist();
                
                if (map == 1){  // Assistable weapon
                    weapons[id].flags42 &= 0xef;    // Set bit 5 to 0
                    weapons[id].flags42 |= 0x20;    // Set bit 6 to 1
                    
                    weapons[id].map_type = 0xff;
                }
                else if (map > 1){ // Map weapon
                    weapons[id].flags42 &= 0xdf;    // Set bit 6 to 0
                    weapons[id].flags42 |= 0x10;    // Set bit 5 to 1
                    
                    // Update map type
                    if (map == 23)
                        map = 40;
                    else if (map == 24)
                        map = 43;
                    else
                        map -= 2;
                    
                    weapons[id].map_type = map;
                }
                else{   // Nothing
                    weapons[id].flags42 &= 0xef;    // Set bit 5 to 0
                    weapons[id].flags42 &= 0xdf;    // Set bit 6 to 0
                    
                    weapons[id].map_type = 0xff;
                }
                
                
                // Update type property
                int type = pw.getType();
                
                if (type == 1){  // Blockable
                    weapons[id].flags42 |= 0xc0;    // Set bits 7 and 8 to 1
                    //weapons[id].flags45 &= 0xd9;    // Set bits 2, 3 and 6 to 0
                    weapons[id].flags45 &= 0xd7;    // Set bits 2 and 6 to 0
                }
                else if (type == 2){ // Beam
                    weapons[id].flags42 &= 0x7f;    // Set bit 8 to 0
                    weapons[id].flags45 &= 0xdf;    // Set bit 6 to 0
                    //weapons[id].flags45 |= 0x06;    // Set bits 2 and 3 to 1
                    weapons[id].flags45 |= 0x02;    // Set bits 2 to 1
                }
                else if (type == 3){ // Gravity
                    weapons[id].flags42 &= 0xbf;    // Set bit 7 to 0
                    weapons[id].flags42 |= 0x80;    // Set bit 8 to 1
                    weapons[id].flags45 &= 0xdf;    // Set bit 6 to 0
                    //weapons[id].flags45 |= 0x06;    // Set bits 2 and 3 to 1
                    weapons[id].flags45 |= 0x02;    // Set bits 2 to 1
                }
                else if (type == 4){ // Funnel (blockable)
                    weapons[id].flags42 |= 0xc0;    // Set bits 7 and 8 to 1
                    //weapons[id].flags45 |= 0x26;    // Set bits 2, 3 and 6 to 1
                    weapons[id].flags45 |= 0x22;    // Set bits 2 and 6 to 1
                }
                else if (type == 5){ // Funnel (non-blockable)
                    weapons[id].flags42 &= 0x3f;    // Set bits 7 and 8 to 0
                    //weapons[id].flags45 |= 0x26;    // Set bits 2, 3 and 6 to 1
                    weapons[id].flags45 |= 0x22;    // Set bits 2 and 6 to 1
                }
                else{   // Normal
                    weapons[id].flags42 &= 0x3f;    // Set bits 7 and 8 to 0
                    //weapons[id].flags45 &= 0xd9;    // Set bits 2, 3 and 6 to 0
                    weapons[id].flags45 &= 0xd7;    // Set bits 2 and 6 to 0
                }
                
                
                // Update expansion property
                int expansion = pw.getExpansion();
                
                if (expansion == 1){    // Null bunshin
                    weapons[id].flags44 &= 0xdf;    // Set bit 6 to 0
                    weapons[id].flags44 |= 0x10;    // Set bit 5 to 1
                }
                else if (expansion == 2){   // Reduce shield
                    weapons[id].flags44 &= 0xef;    // Set bit 6 to 0
                    weapons[id].flags44 |= 0x20;    // Set bit 5 to 1
                }
                else{   // Nothing
                    weapons[id].flags44 &= 0xcf;    // Set bits 5 and 6 to 0
                }
                
                
                // Update field property
                int field = pw.getField();
                
                if (field == 1){    // Null Distortion Field
                    //weapons[id].flags41 &= 0x7f;    // Set bit 8 to 0
                    weapons[id].flags46 &= 0xfe;    // Set bit 1 to 0
                    weapons[id].flags45 |= 0x80;    // Set bit 8 to 1
                }
                else if (field == 2){ // Null AT Field
                    //weapons[id].flags41 |= 0x80;    // Set bit 8 to 1
                    weapons[id].flags46 |= 1;    // Set bit 1 to 1
                    weapons[id].flags45 |= 0x80;    // Set bit 8 to 1
                }
                else{   // Nothing
                    //weapons[id].flags41 &= 0x7f;    // Set bit 8 to 0
                    weapons[id].flags46 &= 0xfe;    // Set bit 1 to 0
                    weapons[id].flags45 &= 0x7f;    // Set bit 8 to 0
                }
                
                
                // Update terrain rankings
                weapons[id].flags40 &= 0x1f;    // Set bits 6 - 8 to 0
                weapons[id].flags41 &= 0;    // Set everything to 0
                
                // Sky
                switch (pw.getSky()){
                    case 1:
                        weapons[id].flags40 |= 0x80;
                        break;
                    case 2:
                        weapons[id].flags40 |= 0x60;
                        break;
                    case 3:
                        weapons[id].flags40 |= 0x40;
                        break;
                    case 4:
                        weapons[id].flags40 |= 0x20;
                        break;
                    default:
                        break;
                }
                
                // Ground
                switch (pw.getGround()){
                    case 1:
                        weapons[id].flags41 |= 0x04;
                        break;
                    case 2:
                        weapons[id].flags41 |= 0x03;
                        break;
                    case 3:
                        weapons[id].flags41 |= 0x02;
                        break;
                    case 4:
                        weapons[id].flags41 |= 0x01;
                        break;
                    default:
                        break;
                }
                
                // Water
                switch (pw.getWater()){
                    case 1:
                        weapons[id].flags41 |= 0x20;
                        break;
                    case 2:
                        weapons[id].flags41 |= 0x18;
                        break;
                    case 3:
                        weapons[id].flags41 |= 0x10;
                        break;
                    case 4:
                        weapons[id].flags41 |= 0x08;
                        break;
                    default:
                        break;
                }
                
                // Space
                switch (pw.getSpace()){
                    case 1:
                        weapons[id].flags41 |= 0xc0;
                        break;
                    case 2:
                        weapons[id].flags41 |= 0x80;
                        break;
                    case 3:
                        weapons[id].flags41 |= 0x40;
                        break;
                    default:
                        break;
                }
                
                // Update status effect
                weapons[id].status = pw.getStatus();
            }
        }
    }

    
    public void loadUnit(){
        textfieldHP.setText("" + units[current_unit].HP);
        textfieldEN.setText("" + units[current_unit].EN);
        textfieldArmor.setText("" + units[current_unit].armor);
        textfieldMobility.setText("" + units[current_unit].mobility);
        textfieldMovement.setText("" + units[current_unit].movement);
        textfieldCost.setText("" + units[current_unit].cost);
        textfieldReward.setText("" + units[current_unit].reward);
        textfieldRewardPP.setText("" + units[current_unit].reward_pp);
        
        comboAbility1.setSelectedIndex(units[current_unit].ability1);
        comboAbility2.setSelectedIndex(units[current_unit].ability2);
        comboAbility3.setSelectedIndex(units[current_unit].ability3);
        comboAbility4.setSelectedIndex(units[current_unit].ability4);
        
        comboParts.setSelectedIndex(units[current_unit].num_parts);
        
        
        // SIZE ----------------------------------------------
        
        int size = (units[current_unit].ratings & 0x1c00000);

        switch (size){
            case 0x1000000: // LL
                comboSize.setSelectedIndex(4);
                break;
            case 0xc00000: // L
                comboSize.setSelectedIndex(3);
                break;
            case 0x800000: // M
                comboSize.setSelectedIndex(2);
                break;
            case 0x400000: // S
                comboSize.setSelectedIndex(1);
                break;
            case 0: // SS
                comboSize.setSelectedIndex(0);
                break;
        }
        
        
        // ADAPTABILITY Ratings --------------------------------------
        
        int sky = (units[current_unit].ratings & 7);
        
        switch (sky){
            case 4: // C
                comboAdaptSky.setSelectedIndex(1);
                break;
            case 3: // B
                comboAdaptSky.setSelectedIndex(2);
                break;
            case 2: // A
                comboAdaptSky.setSelectedIndex(3);
                break;
            case 1: // S
                comboAdaptSky.setSelectedIndex(4);
                break;
            case 0: // Nothing
                comboAdaptSky.setSelectedIndex(0);
                break;
        }
        
        int ground = (units[current_unit].ratings & 56);
        
        switch (ground){
            case 32: // C
                comboAdaptGround.setSelectedIndex(1);
                break;
            case 24: // B
                comboAdaptGround.setSelectedIndex(2);
                break;
            case 16: // A
                comboAdaptGround.setSelectedIndex(3);
                break;
            case 8: // S
                comboAdaptGround.setSelectedIndex(4);
                break;
            case 0: // Nothing
                comboAdaptGround.setSelectedIndex(0);
                break;
        }
        
        int space = (units[current_unit].ratings & 0xe00);
        
        switch (space){
            case 0x800: // C
                comboAdaptSpace.setSelectedIndex(1);
                break;
            case 0x600: // B
                comboAdaptSpace.setSelectedIndex(2);
                break;
            case 0x400: // A
                comboAdaptSpace.setSelectedIndex(3);
                break;
            case 0x200: // S
                comboAdaptSpace.setSelectedIndex(4);
                break;
            case 0: // Nothing
                comboAdaptSpace.setSelectedIndex(0);
                break;
        }
        
        int water = (units[current_unit].ratings & 448);
        
        switch (water){
            case 256: // C
                comboAdaptWater.setSelectedIndex(1);
                break;
            case 192: // B
                comboAdaptWater.setSelectedIndex(2);
                break;
            case 128: // A
                comboAdaptWater.setSelectedIndex(3);
                break;
            case 64: // S
                comboAdaptWater.setSelectedIndex(4);
                break;
            case 0: // Nothing
                comboAdaptWater.setSelectedIndex(0);
                break;
        }
        
        
        // MOVEMENT Ratings -----------------------------------
        
        sky = (units[current_unit].ratings & 0x3000);
        
        switch (sky){
            case 0x3000: // S? (this shouldn't happen)
                System.out.println("Unit has S movement in space?");
                comboMoveSky.setSelectedIndex(0);
                break;
            case 0x2000: // B
                comboMoveSky.setSelectedIndex(1);
                break;
            case 0x1000: // A
                comboMoveSky.setSelectedIndex(2);
                break;
            case 0: // Nothing
                comboMoveSky.setSelectedIndex(0);
                break;
        }
        
        ground = (units[current_unit].ratings & 0xc000);
        
        switch (ground){
            case 0xc000: // S? (this shouldn't happen)
                System.out.println("Unit has S movement in space?");
                comboMoveGround.setSelectedIndex(0);
                break;
            case 0x8000: // B
                comboMoveGround.setSelectedIndex(1);
                break;
            case 0x4000: // A
                comboMoveGround.setSelectedIndex(2);
                break;
            case 0: // Nothing
                comboMoveGround.setSelectedIndex(0);
                break;
        }
        
        space = (units[current_unit].ratings & 0xc0000);
        
        switch (space){
            case 0xc0000: // S? (this shouldn't happen)
                System.out.println("Unit has S movement in space?");
                comboMoveSpace.setSelectedIndex(0);
                break;
            case 0x80000: // B
                comboMoveSpace.setSelectedIndex(1);
                break;
            case 0x40000: // A
                comboMoveSpace.setSelectedIndex(2);
                break;
            case 0: // Nothing
                comboMoveSpace.setSelectedIndex(0);
                break;
        }
        
        water = (units[current_unit].ratings & 0x30000);
        
        switch (water){
            case 0x30000: // S? (this shouldn't happen)
                System.out.println("Unit has S movement in water?");
                comboMoveWater.setSelectedIndex(0);
                break;
            case 0x20000: // B
                comboMoveWater.setSelectedIndex(1);
                break;
            case 0x10000: // A
                comboMoveWater.setSelectedIndex(2);
                break;
            case 0: // Nothing
                comboMoveWater.setSelectedIndex(0);
                break;
        }
        
        int uground = (units[current_unit].ratings & 0x300000);
        
        switch (uground){
            case 0x300000: // S? (this shouldn't happen)
                System.out.println("Unit has S movement in water?");
                comboMoveUnderground.setSelectedIndex(0);
                break;
            case 0x200000: // B
                comboMoveUnderground.setSelectedIndex(1);
                break;
            case 0x100000: // A
                comboMoveUnderground.setSelectedIndex(2);
                break;
            case 0: // Nothing
                comboMoveUnderground.setSelectedIndex(0);
                break;
        }
        
        
        writeName();
        writeSeries();
        loadWeapons();
    }
    
    
    public void loadWeapons(){
        panelWeapList.setPreferredSize(new Dimension(425, 4650));
        
        int offX = 10;
        int offY = 5;
        
        panelWeapList.removeAll();
        
        for (int i = 0; i < units[current_unit].weapons.length; i++){
            int id = units[current_unit].weapons[i];
            
            WeaponPanel wp = new WeaponPanel();
            
            if (id == 65535){
                wp.setID(-1);
            }
            else{
                boolean block = false;
                boolean gravity = false;
                
                wp.setID(id);
                wp.setPower(weapons[id].power);
                wp.setMinRange(weapons[id].min_range);
                wp.setMaxRange(weapons[id].max_range);
                wp.setHit(weapons[id].hit);
                wp.setCrit(weapons[id].critical);
                wp.setAmmo(weapons[id].ammo);
                wp.setEN(weapons[id].en_cost);
                wp.setWill(weapons[id].will);
                wp.setNT(weapons[id].NT_lvl);
                
                if ((weapons[id].flags42 & 192) == 192)
                    block = true;
                else if ((weapons[id].flags42 & 128) == 128)
                    gravity = true;
                
                if ((weapons[id].flags42 & 16) == 16){  // MAP weapon
                    int map_value = weapons[id].map_type;
                    
                    if (map_value == 40)
                        map_value = 21;
                    else if (map_value == 43)
                        map_value = 22;
                    
                    wp.setMapAssist(2 + map_value);
                }
                else if ((weapons[id].flags42 & 32) == 32)
                    wp.setMapAssist(1);  // Assist weapon
                
                wp.setP((weapons[id].flags44 & 2) == 2);
                wp.setW((weapons[id].flags44 & 1) == 1);
                wp.setMissile((weapons[id].flags44 & 4) == 4);
                wp.setBuilding((weapons[id].flags44 & 64) == 64);
                
                if (gravity)
                        wp.setType(3);  // Gravity attack
                else if (block){
                    //if ((weapons[id].flags45 & 38) == 38)
                    if ((weapons[id].flags45 & 34) == 34)
                        wp.setType(4);  // Blockable funnel attack
                    else
                        wp.setType(1);  // Blockable attack
                }
                else{
                    //if ((weapons[id].flags45 & 38) == 38)
                    if ((weapons[id].flags45 & 34) == 34)
                        wp.setType(5);  // Unblockable funnel attack
                    //else if ((weapons[id].flags45 & 6) == 6)
                    else if ((weapons[id].flags45 & 2) == 2)
                        wp.setType(2);  // Beam weapon
                }
                
                int expansion = weapons[id].flags44 & 48;
                
                if (expansion == 32)
                    wp.setExpansion(2); // Reduce shields
                else if (expansion == 16)
                    wp.setExpansion(1); // Null bunshin
                
                
                if ((weapons[id].flags45 & 128) == 128){
                    if ((weapons[id].flags46 & 1) == 1)
                        wp.setField(2); // Null AT Field
                    else
                        wp.setField(1); // Null Distortion Field
                }
                
                // Terrain rankings
                // Sky
                if ((weapons[id].flags40 & 0x80) == 0x80){
                    wp.setSky(1);
                }
                else if ((weapons[id].flags40 & 0x60) == 0x60){
                    wp.setSky(2);
                }
                else if ((weapons[id].flags40 & 0x40) == 0x40){
                    wp.setSky(3);
                }
                else if((weapons[id].flags40 & 0x20) == 0x20){
                    wp.setSky(4);
                }
                                
                // Ground
                if ((weapons[id].flags41 & 4) == 4){
                    wp.setGround(1);
                }
                else if ((weapons[id].flags41 & 3) == 3){
                    wp.setGround(2);
                }
                else if ((weapons[id].flags41 & 2) == 2){
                    wp.setGround(3);
                }
                else if((weapons[id].flags41 & 1) == 1){
                    wp.setGround(4);
                }
                
                // Water
                if ((weapons[id].flags41 & 32) == 32){
                    wp.setWater(1);
                }
                else if ((weapons[id].flags41 & 24) == 24){
                    wp.setWater(2);
                }
                else if ((weapons[id].flags41 & 16) == 16){
                    wp.setWater(3);
                }
                else if((weapons[id].flags41 & 8) == 8){
                    wp.setWater(4);
                }
                
                // Space
                // There's 4 rankings for space: B, A, S and nothing
                if ((weapons[id].flags41 & 192) == 192){
                    wp.setSpace(1);
                }
                else if ((weapons[id].flags41 & 128) == 128){
                    wp.setSpace(2);
                }
                else if ((weapons[id].flags41 & 64) == 64){
                    wp.setSpace(3);
                }
                
                
                // Set the status effect
                wp.setStatus(weapons[id].status);
            }
            
            wp.setBounds(offX, i*290 + offY, 415, 285);

            panelWeapList.add(wp);
        }
        
        panelWeapList.repaint();
    }

    
    public void changePage(int delta){
        saveUnit();
        current_unit += delta;
        loadUnit();

        updateControls();
    }

    
    public void jumpTo(int num){
        saveUnit();

        current_unit = num;

        if (num < 0)
            current_unit = 0;
        else if (current_unit > (units.length - 2) )
            current_unit = (units.length - 1);

        //System.out.println("current: " + current_dialogue + " max: " + script.size());
        loadUnit();

        updateControls();
    }


    public void updateControls(){
        labelCurrent.setText( (current_unit + 1) + " / " + units.length );
        buttonPrevious.setEnabled(current_unit != 0);
        buttonNext.setEnabled(current_unit != units.length - 1);
    }

    
    public void writeName(){
        switch(current_unit + 1){
            case 2:
                labelName.setText("Triple Jim");
                break;
            case 3:
                labelName.setText("Triple Jim Supercar");
                break;
            case 4:
                labelName.setText("Triple Jim Heli");
                break;

            case 6:
                labelName.setText("Power Riser (Leina)");
                break;
            case 7:
                labelName.setText("Blue Jet");
                break;
            case 8:
                labelName.setText("Blue Jet (transformed)");
                break;
            case 9:
                labelName.setText("Rod Drill");
                break;
            case 10:
                labelName.setText("Rod Drill (transformed)");
                break;
            case 11:
                labelName.setText("Kenryu");
                break;
            case 12:
                labelName.setText("Vikungfu");
                break;
            case 13:
                labelName.setText("EVA 03");
                break;
            case 14:
                labelName.setText("EVA 01");
                break;
            case 15:
                labelName.setText("EVA 01 (S2 Engine)");
                break;
            case 16:
                labelName.setText("EVA 00 (orange)");
                break;
            case 17:
                labelName.setText("EVA 00 (blue)");
                break;
            case 18:
                labelName.setText("EVA 02");
                break;
            case 19:
                labelName.setText("EVA 01 (berserk)");
                break;
            case 20:
                    labelName.setText("Gatling Boar");
                    break;
            case 21:
                    labelName.setText("Cell Booster");
                    break;
            case 22:
                    labelName.setText("Cell Fighter");
                    break;
            case 23:
                    labelName.setText("Cell Fighter (no change frame ability)");
                    break;
            case 24:
                    labelName.setText("Cell Booster Valhalla");
                    break;
            case 25:
                    labelName.setText("Cell Fighter (Valhalla)");
                    break;
            case 26:
                    labelName.setText("Dragon Flare");
                    break;
            case 27:
                    labelName.setText("Knight GEAR Oger");
                    break;
            case 28:
                    labelName.setText("Knight GEAR Oger (face down)");
                    break;
            case 29:
                    labelName.setText("Oger - Dragon Flare");
                    break;
            case 30:
                    labelName.setText("Oger - Hyper Whip");
                    break;
            case 31:
                    labelName.setText("Oger - Phoenix Alae");
                    break;
            case 32:
                    labelName.setText("Oger - Unicorn Drill");
                    break;
            case 33:
                    labelName.setText("Oger - ChojuuOh Kiba");
                    break;
            case 34:
                    labelName.setText("Hyper Whip");
                    break;
            case 35:
                    labelName.setText("Full Armor Dendoh");
                    break;
            case 36:
                    labelName.setText("Full Armor Dendoh (face down?)");
                    break;
            case 37:
                    labelName.setText("GEAR Fighter Dendoh");
                    break;
            case 38:
                    labelName.setText("GEAR Fighter Dendoh (face down)");
                    break;
            case 39:
                    labelName.setText("Dendoh - Gatling Boar");
                    break;
            case 40:
                    labelName.setText("Oger - Gatling Boar");
                    break;
            case 41:
                    labelName.setText("Dendoh - Dragon Flare");
                    break;
            case 42:
                    labelName.setText("Dendoh - Hyper Whip");
                    break;
            case 43:
                    labelName.setText("Dendoh - Phoenix Alae");
                    break;
            case 44:
                    labelName.setText("Dendoh - Bull Horn");
                    break;
            case 45:
                    labelName.setText("Oger - Bull Horn");
                    break;
            case 46:
                    labelName.setText("Dendoh - Unicorn Drill");
                    break;
            case 47:
                    labelName.setText("Dendoh - Leo Circle");
                    break;
            case 48:
                    labelName.setText("Oger - Leo Circle");
                    break;
            case 49:
                    labelName.setText("Dendoh - ChojuuOh Kiba");
                    break;
            case 50:
                    labelName.setText("Dendoh - ChojuuOh Kiba (again?)");
                    break;
            case 51:
                    labelName.setText("Bull Horn");
                    break;
            case 52:
                    labelName.setText("Unicorn Drill");
                    break;
            case 53:
                    labelName.setText("Leo Circle");
                    break;
            case 54:
                    labelName.setText("Valkyre (Walkyure)");
                    break;
            case 55:
                    labelName.setText("Phoenix Alae");
                    break;
            case 56:
                    labelName.setText("Aestevalis C Ryoko");
                    break;
            case 57:
                    labelName.setText("Aestevalis C Hikaru?");
                    break;
            case 58:
                    labelName.setText("Aestevalis C Izumi?");
                    break;
            case 59:
                    labelName.setText("High Mobility Black Sarena");
                    break;
            case 60:
                    labelName.setText("Black Sarena");
                    break;
            case 61:
                    labelName.setText("Aestevalis C Akito");
                    break;
            case 62:
                    labelName.setText("S Aestevalis Saburouta");
                    break;
            case 63:
                    labelName.setText("Nadesico B");
                    break;
            case 64:
                    labelName.setText("Nadesico C");
                    break;
            case 65:
                    labelName.setText("Gelf MAFFU");
                    break;
            case 66:
                    labelName.setText("Stark Dein");
                    break;
            case 67:
                    labelName.setText("Dragoon");
                    break;
            case 68:
                    labelName.setText("Dragoon");
                    break;
            case 69:
                    labelName.setText("Dragoon");
                    break;
            case 70:
                    labelName.setText("Dragoon");
                    break;
            case 71:
                    labelName.setText("Dragonar 1 (Lifter)");
                    break;
            case 72:
                    labelName.setText("Dragonar 1 Custom");
                    break;
            case 73:
                    labelName.setText("Dragonar 2 (Lifter)");
                    break;
            case 74:
                    labelName.setText("Dragonar 2 Custom");
                    break;
            case 75:
                    labelName.setText("Dragonar 3 (Lifter)");
                    break;
            case 76:
                    labelName.setText("Dragonar 3 (final)");
                    break;
            case 77:
                    labelName.setText("Falgen MAFFU");
                    break;
            case 78:
                    labelName.setText("Jagd Gelf MAFFU");
                    break;
            case 79:
                    labelName.setText("Levi Gelf MAFFU");
                    break;
            case 80:
                    labelName.setText("Super Gundam");
                    break;
            case 81:
                    labelName.setText("Zeta Gundam");
                    break;
            case 82:
                    labelName.setText("Waverider");
                    break;
            case 83:
                    labelName.setText("Hyaku Shiki");
                    break;
            case 84:
                    labelName.setText("Full Armor Hyaku Shiki");
                    break;
            case 85:
                    labelName.setText("Dijeh SE-R");
                    break;
            case 86:
                    labelName.setText("Qubeley Mk-II (Puru)");
                    break;
            case 87:
                    labelName.setText("Qubeley Mk-II (Puru Two)");
                    break;
            case 88:
                    labelName.setText("ZZ Gundam");
                    break;
            case 89:
                    labelName.setText("G Fortress");
                    break;
            case 90:
                    labelName.setText("Nel Argama");
                    break;
            case 91:
                    labelName.setText("Mega Rider");
                    break;
            case 92:
                    labelName.setText("Nu Gundam");
                    break;
            case 93:
                    labelName.setText("ReGZ (BWS)");
                    break;
            case 94:
                    labelName.setText("ReGZ (MS)");
                    break;
            case 95:
                    labelName.setText("Gundam Maxter");
                    break;
            case 96:
                    labelName.setText("Gundam Maxter S");
                    break;
            case 97:
                    labelName.setText("Gundam Rose");
                    break;
            case 98:
                    labelName.setText("Gundam Rose S");
                    break;
            case 99:
                    labelName.setText("God Gundam");
                    break;
            case 100:
                    labelName.setText("God Gundam (mounted)");
                    break;
            case 101:
                    labelName.setText("God Gundam H");
                    break;
            case 102:
                    labelName.setText("God Gundam H (mounted)");
                    break;
            case 103:
                    labelName.setText("Dragon Gundam");
                    break;
            case 104:
                    labelName.setText("Dragon Gundam S");
                    break;
            case 105:
                    labelName.setText("Nobel Gundam");
                    break;
            case 106:
                    labelName.setText("Fuun Saiki");
                    break;
            case 107:
                    labelName.setText("Bolt Gundam");
                    break;
            case 108:
                    labelName.setText("Bolt Gundam S");
                    break;
            case 109:
                    labelName.setText("Mandala Gundam");
                    break;
            case 110:
                    labelName.setText("Rising Gundam");
                    break;
            case 111:
                    labelName.setText("Diana A");
                    break;
            case 112:
                    labelName.setText("Boss Borot");
                    break;
            case 113:
                    labelName.setText("Mazinger Z");
                    break;
            case 114:
                    labelName.setText("Great Mazinger");
                    break;
            case 115:
                    labelName.setText("Venus A");
                    break;
            case 116:
                    labelName.setText("MP Great");
                    break;
            case 117:
                    labelName.setText("Black Great");
                    break;
            case 118:
                    labelName.setText("Great Mazinger (original)");
                    break;
            case 119:
                    labelName.setText("Getter Q");
                    break;
            case 120:
                    labelName.setText("Getter Dragon");
                    break;
            case 121:
                    labelName.setText("Getter Liger");
                    break;
            case 122:
                    labelName.setText("Getter Poseidon");
                    break;
            case 123:
                    labelName.setText("Grendizer");
                    break;
            case 124:
                    labelName.setText("Grendizer (WS)");
                    break;
            case 125:
                    labelName.setText("Spacer");
                    break;
            case 126:
                    labelName.setText("Double Spacer");
                    break;
            case 127:
                    labelName.setText("TFO");
                    break;
            case 128:
                    labelName.setText("Zeorymer");
                    break;
            case 129:
                    labelName.setText("Zeorymer (no DCS)");
                    break;
            case 130:
                    labelName.setText("Galva FXII");
                    break;
            case 131:
                    labelName.setText("Daimos");
                    break;
            case 132:
                    labelName.setText("Bluegar");
                    break;
            case 133:
                    labelName.setText("Raideen");
                    break;
            case 134:
                    labelName.setText("Godbird");
                    break;
            case 135:
                    labelName.setText("ALIEL");
                    break;
            case 136:
                    labelName.setText("Vermilion (Elfy)");
                    break;
            case 137:
                    labelName.setText("Shinsei Type-2");
                    break;
            case 138:
                    labelName.setText("Rahxephon");
                    break;
            case 139:
                    labelName.setText("Shinsei Rahxephon (Ayato)");
                    break;
            case 140:
                    labelName.setText("Rahxephon (final)");
                    break;
            case 141:
                    labelName.setText("Garmraid");
                    break;
            case 142:
                    labelName.setText("Garmraid Blaze (G)");
                    break;
            case 143:
                    labelName.setText("Garmraid Blaze (S)");
                    break;
            case 144:
                    labelName.setText("Cerberus");
                    break;
            case 145:
                    labelName.setText("Cerberus Ignite (G)");
                    break;
            case 146:
                    labelName.setText("Cerberus Ignite (S)");
                    break;
            case 147:
                    labelName.setText("EVA 01 (S2 engine - berserk)");
                    break;

            case 294:
                labelName.setText("Mini UFO");
                break;

            case 322:
                labelName.setText("AI-1 (2nd form)");
                break;
            default:
                labelName.setText("???");
        }
    }
    
    
    public void writeSeries(){
        String text = units[current_unit].series + " - ";
        
        switch(units[current_unit].series){
            case 0:
                text += "Machine Robo - Revenge of Cronos";
                break;
            case 1:
                text += "End of Evangelion";
                break;
            case 2:
                text += "End of Evangelion";
                break;
            case 3:
                text += "GEAR Fighter Dendoh";
                break;
            case 4:
                text += "Nadesico - The Prince of Darkness";
                break;
            case 5:
                text += "Nadesico - The Prince of Darkness";
                break;
            case 6:
                text += "Metal Armor Dragonar";
                break;
            case 7:
                text += "Mobile Suit Zeta Gundam";
                break;
            case 8:
                text += "Mobile Suit ZZ Gundam";
                break;
            case 9:
                text += "MSG - Char's Counterattack";
                break;
            case 10:
                text += "Mobile Fighter G Gundam";
                break;
            case 11:
                text += "Mazinger Z";
                break;
            case 12:
                text += "Great Mazinger";
                break;
            case 13:
                text += "Getter Robo";
                break;
            case 14:
                text += "Getter Robo G";
                break;
            case 15:
                text += "UFO Robo Grendizer";
                break;
            case 17:
                text += "Zeorymer";
                break;
            case 18:
                text += "Daimos";
                break;
            case 19:
                text += "Raideen";
                break;
            case 20:
                text += "Rahxephon";
                break;
            case 21:
                text += "Banpresto Originals";
                break;
            default:
                text += "???";
        }
        
        labelSeries.setText(text);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonJump;
    private javax.swing.JButton buttonNext;
    private javax.swing.JButton buttonPrevious;
    private javax.swing.JComboBox comboAbility1;
    private javax.swing.JComboBox comboAbility2;
    private javax.swing.JComboBox comboAbility3;
    private javax.swing.JComboBox comboAbility4;
    private javax.swing.JComboBox comboAdaptGround;
    private javax.swing.JComboBox comboAdaptSky;
    private javax.swing.JComboBox comboAdaptSpace;
    private javax.swing.JComboBox comboAdaptWater;
    private javax.swing.JComboBox comboMoveGround;
    private javax.swing.JComboBox comboMoveSky;
    private javax.swing.JComboBox comboMoveSpace;
    private javax.swing.JComboBox comboMoveUnderground;
    private javax.swing.JComboBox comboMoveWater;
    private javax.swing.JComboBox comboParts;
    private javax.swing.JComboBox comboSize;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JLabel labelAbilities;
    private javax.swing.JLabel labelAbility1;
    private javax.swing.JLabel labelAbility2;
    private javax.swing.JLabel labelAbility3;
    private javax.swing.JLabel labelAbility4;
    private javax.swing.JLabel labelAdaptability;
    private javax.swing.JLabel labelCurrent;
    private javax.swing.JLabel labelGround;
    private javax.swing.JLabel labelJumpTo;
    private javax.swing.JLabel labelName;
    private javax.swing.JLabel labelRankings;
    private javax.swing.JLabel labelSeries;
    private javax.swing.JLabel labelSeriesID;
    private javax.swing.JLabel labelSize;
    private javax.swing.JLabel labelSky;
    private javax.swing.JLabel labelSpace;
    private javax.swing.JLabel labelTerrainMovement;
    private javax.swing.JLabel labelUnderground;
    private javax.swing.JLabel labelUnitArmor;
    private javax.swing.JLabel labelUnitCost;
    private javax.swing.JLabel labelUnitEN;
    private javax.swing.JLabel labelUnitHP;
    private javax.swing.JLabel labelUnitMobility;
    private javax.swing.JLabel labelUnitMovement;
    private javax.swing.JLabel labelUnitName;
    private javax.swing.JLabel labelUnitParts;
    private javax.swing.JLabel labelUnitRewardCash;
    private javax.swing.JLabel labelUnitRewardPP;
    private javax.swing.JLabel labelWater;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuNavigate;
    private javax.swing.JMenuItem menuitemClose;
    private javax.swing.JMenuItem menuitemFirst;
    private javax.swing.JMenuItem menuitemLast;
    private javax.swing.JMenuItem menuitemNext;
    private javax.swing.JMenuItem menuitemOpen;
    private javax.swing.JMenuItem menuitemPrevious;
    private javax.swing.JMenuItem menuitemSave;
    private javax.swing.JPanel panelNavigation;
    private javax.swing.JPanel panelUnit;
    private javax.swing.JPanel panelWeapList;
    private javax.swing.JPanel panelWeapons;
    private javax.swing.JScrollPane scrollWeapons;
    private javax.swing.JTextField textfieldArmor;
    private javax.swing.JTextField textfieldCost;
    private javax.swing.JTextField textfieldEN;
    private javax.swing.JTextField textfieldHP;
    private javax.swing.JTextField textfieldJump;
    private javax.swing.JTextField textfieldMobility;
    private javax.swing.JTextField textfieldMovement;
    private javax.swing.JTextField textfieldReward;
    private javax.swing.JTextField textfieldRewardPP;
    // End of variables declaration//GEN-END:variables
}
